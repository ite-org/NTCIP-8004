{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Title Page","text":"Working Group Draft     NTCIP 8004 {{ release_number }}     National Transportation Communications for ITS Protocol     Structure and Identification of Management Information (SMI)"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>This document was prepared though an open-source standards development process with the following active contributors:</p> <p></p> <p>Check out the full list of contributors here.</p> <p>In addition, the following submitted comments during the process:</p> <ul> <li>k-vaughn</li> </ul> <p>The resultant document is maintained by the NTCIP Open-Source Process (OPS) Working Group (WG), a subdivision of the Joint Committee on the NTCIP. The Joint Committee on the NTCIP is organized under a Memorandum of Understanding among the American Association of State Highway and Transportation Officials (AASHTO), the Institute of Transportation Engineers (ITE), and the National Electrical Manufacturers Association (NEMA). The Joint Committee on the NTCIP consists of six representatives from each of the standards development organizations (SDOs) and provides guidance for NTCIP development.</p>"},{"location":"background/","title":"2 Background","text":""},{"location":"background/#background-informative","title":"Background [Informative]","text":""},{"location":"background/#introduction","title":"Introduction","text":"<p>Within NTCIP, transportation equipment is managed primarily using the Simple Network Management Protocol (SNMP) to exchange transportation management information with transportation management applications (e.g., within a central system). This type of exchange is commonly called Center-to-Field (C2F) communications. Within SNMP terminology, the transportation equipment includes an SNMP agent that responds to requests received from a transportation management application, which is known as an SNMP management application (or manager). SNMP requests and responses share a similar structure, which can be depicted in the Unified Modeling Language (UML), as shown in Figure 1 (with slight simplifications for the purpose of this discussion).</p> <pre><code>---\ntitle: SNMP Message\n---\n  classDiagram\n    class Message {\n        msgSecurityParameters\n        msgVersion\n    }\n    class HeaderData {\n        msgFlags\n        msgID\n        msgMaxSize\n        msgSecurityModel\n    }\n    class ScopedPDU {\n        contextEngineID\n        contextName\n        data\n    }\n    class PDU {\n        error-index\n        error-status\n        request-id\n    }\n    class VarBind {\n        name\n        value\n    }\n    Message *-- \"1\" HeaderData : msgGlobalData\n    Message *-- \"1\" ScopedPDU : msgData\n    ScopedPDU *-- \"1\" PDU : data\n    PDU *-- \"1..*\" VarBind : variable-bindings\n    note for ScopedPDU \"Might be encrypted\"</code></pre> <p>Starting in the upper-left corner of Figure 1, a message is the logical SNMP structure that is serialized as a data packet (i.e., byte-stream) and exchanged by lower-layer protocol entities (e.g., TCP/IP). It consists of a variety of information, such as protocol header, version information, security parameters, and a potentially encrypted scoped protocol data unit (PDU). The scoped PDU includes the context for the message, error information, the request identifier, and a series of variable bindings represented as a name/value ordered pair. Within this structure, each variable binding (i.e., name/value ordered pair) is the serialized representation of an object instance stored within the identified SNMP context. An object instance is an instance of a defined object type, which is a formal abstract definition of a piece of data.</p> <p>For example (in reverse order), NTCIP 1204, which defines data for environmental sensor stations, defines an object type called essAirTemperature. An environmental sensor station might support multiple temperature sensors; each sensor would be associated with its own instance of the object type, identified as <code>essAirTemperature.&lt;sensor number&gt;</code>. An SNMP agent could report the value of any object instance by creating an ordered pair of the name and value of the object instance and enclosing it in an SNMP message, potentially with other variable bindings.</p> <p>In order for the SNMP manager to understand the data contained within each message, the SNMP manager and SNMP agent must agree on:</p> <ol> <li>a mechanism to unambiguously identify the object type and object instance,</li> <li>the precise semantics (i.e., meaning) of the data value,</li> <li>the way in which the data will be encoded,</li> <li>the operations that are allowed (e.g., can a manager alter the value or is it read-only), and</li> <li>the data that should be supported.</li> </ol> <p>These details are specified using a formalized NVT-ASCII text file known as a Management Information Base (MIB) module coupled with the definition of SNMP, as defined in RFCs 2578-2580 and RFCs 3411- 3418.</p>"},{"location":"background/#management-information-base-mib-and-module","title":"Management Information Base (MIB) and Module","text":"<p>A Management Information Base (MIB) is the information that a specific SNMP context (typically a device) can make available for management operations. A MIB is defined by a text-based \"MIB Module\" (or collection of MIB Modules) that specifies the collection of object types that that the device supports. A MIB module is written using formal conventions in a structure that can read by both humans and computers. Object types include controls, configuration parameters, and status information (including sensor values and internal device status). Any data that is to be accessible via SNMP must be defined in a MIB module.</p> <p>The standardized format of a MIB module allows automating much of the syntactic processing of data with off-the-shelf SNMP tools and allows developers to focus on implementing the semantics according to the documented definitions contained with the MIB module. The rules for the structure and management of this information also allow multiple MIB modules (e.g., NTCIP standard, Internet standard, manufacturer-specific extensions) to be used for a single device. The MIB modules are integrated into the device software and its management stations using various methods (e.g, implemented directly as data structures in the software, compiled into binary tables that facilitate use by operational software). It is common for the MIB modules to be called the MIB but, technically, this is incorrect. The MIB is the instantiated collection of data objects available to management stations to configure, control, and monitor the device. It is not a database in the traditional sense.</p> <p>Figure 2 illustrates how using MIB modules makes NTCIP C2F communications possible. In this example, the field devices are shown on the left of the figure with their associated MIB modules. The dynamic message sign uses only objects defined in standards while the traffic signal controller includes manufacturer-specific objects. The management station is commonly called a \"central system\" in transportation systems.</p> <p></p> <p>Figure 2: Integrated MIB Modules Make NTCIP C2F Communications Possible</p>"},{"location":"background/#types-of-object-types","title":"Types of Object Types","text":"<p>Within SNMP, each piece of management information that can be exchanged is called an object instance. Object instances are abstracted into object types and formally defined within the MIB module. However, when reading a MIB module, it is important to understand the different types of object types that might occur.</p>"},{"location":"background/#leaf-object-types","title":"Leaf Object Types","text":"<p>Leaf object types do not have any globally unique sub-identifiers specified and are the only object types that can be instantiated in a device and retrieved via SNMP operations. The sub-identifiers for leaf object types are reserved for the identification of specific instances of the object type; they are only unique within the indicated device context (e.g., the object type sysName is a leaf object type and has a globally unique identifier; however, every SNMP device that instantiates this object type will use the same instance identifier). Leaf objects can be further classified in three different ways:</p> <ol> <li>Based on whether multiple instances are allowed,</li> <li>Based on the complexity of the underlying data, and</li> <li>Based on the types of operations that are permitted.</li> </ol>"},{"location":"background/#classification-by-instantiation-rules","title":"Classification by Instantiation Rules","text":"<p>If a leaf object type is defined as a part of a conceptual row of a table, multiple instances of the object are allowed, one for each row that has been conceptually instantiated within the table. This type of leaf object type is known as a \"columnar object type\". The different instances of the columnar object type are defined according to the mechanism defined by the INDEX clause of the conceptual row using one or more sub-identifiers.</p> <p>If a leaf object type is not defined as a part of a conceptual table, only one instance of the object can exist; this object type is called a \"scalar object type\". The singular instance of a scalar object type is always identified by the single sub-identifier instance number of \"0\".</p>"},{"location":"background/#complexity-of-object-types","title":"Complexity of Object Types","text":"<p>SNMP was designed to exchange elemental data; as such, leaf object types are not allowed to directly use any ASN.1 data structure (e.g., <code>SEQUENCE</code>, <code>SEQUENCE OF</code>, <code>CHOICE</code>) for its syntax. This allows SNMP to provide very flexible data exchanges based on the need of the user. However, within a message, each elemental object instance must be uniquely identified, which adds overhead.</p> <p>Within NTCIP, there are often needs to frequently exchange the same set of object instances in environments where the amount of data that is exchanged is a concern (e.g., communication environments with data usage limitations). These environments result in a need for a more efficient solution than always exchanging data in its most elemental form. To overcome these issues, the NTCIP classifies every leaf object type as a simple, block, or configurable object type.</p> <p>Simple object types represent elemental data, as traditionally defined with normal SNMP operations. Simple object types include integers, octet strings, object identifiers, bit strings, and other types that derive from these basic types.</p> <p>Block object types represent data structures (e.g., <code>SEQUENCE</code>, <code>SEQUENCE OF</code>, <code>CHOICE</code>) that are normally prohibited as SNMP object types. NTCIP gets around the SNMP prohibition by setting the <code>SYNTAX</code> clause of the <code>OBJECT-TYPE</code> macro to resolve to an <code>OCTET STRING</code> (typically by using a textual convention). It then defines the value of that <code>OCTET STRING</code> to be a serialization of a defined data structure. From the SNMP perspective, the data is an elemental <code>OCTET STRING</code>, but the sender and receiver perform additional encoding and decoding to allow for the exchange of a more complex structure. Within NTCIP, the preferred way to define the serialization of these data structures is by using an <code>ITSOerString</code>, which is defined by ISO 20684-1 as a data structure specified using X.680 ASN.1 and serialized using the Octet Encoding Rules (OER).</p> <p>Configurable object types are similar to block objects in that each configurable object represents a data structure that can be serialized into an OCTET STRING and then be exchanged as a single SNMP object type. However, block object types have static definitions of their data structures defined within the MIB module. By comparison, configurable object types allow for a manager to configure the definition of the data structure after the implementation has been deployed and while the SNMP agent is running. Within NTCIP, configurable object types are typically <code>SEQUENCE</code> structures and the configuration is typically defined in a table where each ordered row of the table represents an ordered <code>ComponentType</code> (i.e., field) within the <code>SEQUENCE</code> structure. The serialization of the configurable object typically uses OER to produce an <code>OCTET STRING</code> that can be exchanged by SNMP.</p>"},{"location":"background/#object-type-permissions","title":"Object Type Permissions","text":"<p>SNMP object types can also be classified based on the types of data represented and the operations that are allowed under different scenarios. There are four basic types of object types from this perspective, as follows:</p> <ol> <li>Status object types. Read-only objects that report the conditions     that can be monitored by the SNMP agent.</li> <li>Control object types. Writeable object types used to request     real-time activation of a feature of a device. In some cases,     control objects can also be used to report status.</li> <li>Parameter object types. Writeable object types used to configure the     SNMP agent where the parameter can be set and validated using a     single SNMP set operation.</li> <li>Interrelated parameter object types. Writeable object types used to     configure the SNMP agent where the parameter has sufficient     interrelationships with other object types to typically require     multiple SNMP set operations using multiple <code>SetRequest</code> messages or a     complex validation check that might consume more time than is     reasonable for a traditional SNMP response.</li> </ol> <p>When a device includes interrelated parameter object types, it defines a mechanism by which the object types can be safely configured. One such approach is to use the database transaction mode as specified in NTCIP 1201.</p>"},{"location":"background/#conceptual-objects","title":"Conceptual Objects","text":"<p>In addition to the leaf object types described above, MIB modules can define three types of conceptual object types: conceptual tables, conceptual rows, conceptual leafs. Conceptual objects can theoretically be instantiated but because they have a <code>MAX-ACCESS</code> value of <code>not-accessible</code>, the rules of SNMP do not allow their exchange and they do not really exist as protocol entities. An implementation can only exchange instances of the accessible object types.</p> <p>A conceptual table defines a set of object types that might traditionally be represented in a written document using a table format. Logically, each conceptual table consists of a number of columns and rows, where each column describes a particular type of data and each row represents a unique instance of data for each column. A conceptual table describes the information contained in the table and the rows that the table should have. It has a <code>SYNTAX</code> of <code>SEQUENCE OF &lt;EntryType&gt;</code>, where <code>&lt;EntryType&gt;</code> is the name of the conceptual row's data structure.</p> <p>A conceptual row defines a set of object types that represent a logical unit of inter-related management information. The row typically supports multiple columns and the object types referenced by that row logically has one instance for each defined row. The row object type defines the rules for the number of rows and the rules for creation and deletion of rows.</p> <p>A conceptual leaf is a simple object type that has been identified as <code>not-accessible</code>; for example an index to a table. While SMIv1 allowed for index object types to be accessible, it provides no real value and increases the time it takes to walk through the data (i.e., by using GetNextRequests) supported by the SNMP agent. As a result, SMIv2 prohibits index object types from being accessible, unless they have been imported from an SMIv1 module. Conceptual leafs can also be defined when a standard wants to declare data that should be supported by a device even if it is never exchanged. For example, the trigger function is required to monitor data within the device and needs to be able to demonstrate that it has appropriate security credentials to access the data. The security credential information is stored in non-accessible objects to indicate that the controller needs to maintain this information but that the information should never be exchanged.</p>"},{"location":"background/#document-overview","title":"Document Overview","text":"<p>The remaining sections of this document define:</p> <ol> <li>The mechanism used to allow multiple independent entities to define     object types while maintaining globally unique names</li> <li>Requirements for the development of MIB modules</li> <li>Requirements for agent implementations</li> <li>Considerations for operating agencies</li> </ol> <p>In addition, Annex A provides the formal definition of the NTCIP 8004 MIB, which must be imported by all other NTCIP MIBs and Annex B provides the rules for converting NTCIP MIBs that are based on SMIv1 into the SMIv2 format required by this document.</p>"},{"location":"conversion/","title":"B Conversion to SMIv2","text":""},{"location":"conversion/#conversion-from-smiv1-to-smiv2-normative","title":"Conversion From SMIv1 To SMIv2 [Normative]","text":"<p>The following defines additional requirements notes that apply to NTCIP modules being converted from SMIv1 to SMIv2.</p> <ol> <li> <p>The value assigned in the SMIv2 <code>MAX-ACCESS</code> clause shall be     consistent with the previous SMIv1 <code>ACCESS</code> clause (i.e., it must     provide greater or equal access)</p> </li> <li> <p>The value assigned in the <code>MAX-ACCESS</code> clause shall be <code>read-create</code>,     if the previous <code>ACCESS</code> clause indicated <code>read-write</code> and the table     supports row creation</p> </li> <li> <p>The <code>STATUS</code> clause shall be updated to reflect the SMIv2 validity of     the object type rather than the SMIv1 optionality of the object type     (e.g., change <code>mandatory</code> and <code>optional</code> to <code>current</code>)</p> </li> <li> <p>The <code>&lt;Units&gt;</code> subclause from the NTCIP SMIv1 conventions shall be     converted to the SMIv2 <code>UNITS</code> clause</p> </li> <li> <p>Each <code>TRAP-TYPE</code> macro shall be converted to a <code>NOTIFICATION-TYPE</code> macro     per the rules of RFC 3584 Clause 2.1.2</p> </li> <li> <p>A <code>NOTIFICATION-TYPE</code> that is being converted from an SMIv1 <code>TRAP-TYPE</code>     shall be assigned an object identifier that equates to the     <code>TRAP-TYPE</code>'s <code>ENTERPRISE</code> clause followed by a zero and followed by     the value assigned to the SMIv1 <code>TRAP-TYPE</code>.</p> </li> <li> <p>Deprecating object types on the basis of converting to     IETF-recognized textual conventions (e.g., <code>INTEGER</code> to <code>Gauge32</code>) is     encouraged when the textual conventions provide significant     additional semantics that off-the-shelf tools can benefit from</p> </li> <li> <p>Converting from <code>Counter</code> to <code>Counter32</code> requires ensuring that the     semantics defined in RFC 2578 Clause 7.1.6 are satisfied</p> </li> <li> <p>The <code>SYNTAX</code> of an object type shall not be changed in a way that     modifies the data type when encoded using BER or OER. When necessary,     the existing object can be deprecated and replaced with a new     object. The following conversions (among others) are prohibited     based on this rule:</p> <ol> <li><code>INTEGER</code> to <code>Unsigned32</code></li> <li><code>INTEGER</code> to <code>Counter32</code></li> <li><code>INTEGER</code> to <code>Gauge32</code></li> <li><code>Counter</code> to <code>ZeroBasedCounter32</code></li> <li><code>Counter</code> to <code>Counter64</code></li> <li><code>Counter</code> to <code>ZeroBasedCounter64</code></li> </ol> </li> <li> <p>The counter-based timekeeping solution used by <code>globalTime</code> is not     conformant with SNMPv3 and shall be deprecated. When time-related     object types need to be defined (e.g., a timestamp), they should be     based on the textual conventions defined in ISO 20684-1.</p> </li> <li> <p>Developers should consider migrating object types that represent     general sensor data to the general-purpose input/output feature of     ISO 20684-2 if and when any backwards compatibility issues arise.</p> </li> </ol>"},{"location":"foreword/","title":"Foreword","text":""},{"location":"foreword/#overview","title":"Overview","text":"<p>This document is an NTCIP Open-Source NTCIP Process, Control, and Information Management document provided as Interim for Field Release (IFR).</p> <p>Open-source documents are developed using the ITS Open-Source Process, as defined in NTCIP 8008. This process provides an open standards development process that accepts issues reported by the community and resolved by peer-reviewed contributions from the community. The open source process concludes with the resultant material being approved by the defined approval process.</p> <p>IFR documents are approved through a streamlined process focused on the technical experts of the community (e.g., those participating in the open-source development process) rather than through a formal ballot of industry managers.</p> <p>NTCIP Process, Control, and Information Management documents define the practices and policies used by the NTCIP Joint Committee and its working groups in developing and maintaining NTCIP publications.</p> <p>This document defines the structure of management information bases (MIBs) within NTCIP standards and is applicable to the NTCIP 1200 series and other NTCIP standards that deal with device data dictionaries.</p>"},{"location":"foreword/#approvals","title":"Approvals","text":"<p>IFRs are peer reviewed within the open-source process with final approval by an associated WG established by the NTCIP Joint Committee.</p> <p>Approval information is provided within the online environment.</p> <p>For more information about NTCIP standards, visit the NTCIP Web Site at www.ntcip.org.</p>"},{"location":"foreword/#user-comment-instructions","title":"User Comment Instructions","text":"<p>Comments can be submitted at any time. In preparation of this NTCIP standards publication, input of users and other interested parties was sought and evaluated.</p> <p>Comments on open-source projects can be submitted either on the discussions or issues tab of the project.</p> <p>Discussions can be initiated at any time and anyone in the community can respond, all within a public environment. Responses to discussion comments are strictly informative and may not be accurate. Discussion comments can lead to the submittal of issues that need to be resolved to clarify the standard.</p> <p>Issues can be submitted at any time. Issues are triaged by the project maintainer, who will evaluate their merit, classify them (e.g., as a bug, documentation issue, omission), and in most cases respond to the submitter. Once ready, issues will be available for contributors to volunteer to address. When a volunteer has a proposed solution, it can be submitted to the project and approved in a relatively short period (when compared to the traditional standards approval process). However, updates to the projects are still version controlled so that users can reference a specific version of the project without fear of it changing.</p> <p>Comments should use the templates provided on the website; otherwise they may be ignored.</p>"},{"location":"foreword/#history","title":"History","text":"<p>For a history of the project, see the projects releases page.</p>"},{"location":"general/","title":"1 General","text":"<ol> <li> <p>IAB STD 58 is still based on ITU-T X.208, which is now withdrawn, but defines the fundamental concept of a macro and MIB module as used for SNMP.\u00a0\u21a9</p> </li> <li> <p>See the ISO maintenance portal for ISO 26048-1 for maintained electronic files.\u00a0\u21a9</p> </li> </ol>"},{"location":"general/#general","title":"General","text":""},{"location":"general/#scope","title":"Scope","text":"<p>This document specifies a set of rules for organizing, describing, and defining transportation management information to be exchanged between transportation management applications and transportation equipment. This document defines the Structure and Identification of Management Information (SMI) used in transportation-related devices. This document is applicable to the NTCIP 1200 series and other NTCIP standards that deal with device data dictionaries.</p> <p>NOTE\u2014This document relies on widely accepted conventions, generally designated as \u201cSMIv2\u201d and defined in the Internet Architecture Board (IAB) Standard (STD) 58.</p>"},{"location":"general/#references","title":"References","text":"<p>The following documents are referenced by this document. At the time of publication, the editions indicated were valid.</p>"},{"location":"general/#normative-references","title":"Normative References","text":"<p>Normative references contain provisions that, through reference in this text, constitute provisions of this document. All standards are subject to revision, and parties to agreements based on this standard are encouraged to investigate the possibility of applying the most recent editions of the standard listed.</p> Identifier Title IAB STD 58 (RFC 2578, Structure of Management Information Version 2 (SMIv2), 1999;RFC 2579, Textual Conventions for SMIv2, 1999;RFC 2580, Conformance Statements for SMIv2, 1999) RFC 3416 Version 2 of the Protocol Operations for the Simple Network Management Protocol (SNMP), 2002 RFC 3419 Textual Conventions for Transport Addresses, 2002 RFC 3584 Coexistence between Version 1, Version 2, and Version 3 of the Internet-standard Network Management Framework, Internet Engineering Task Force (IETF), August 2003 RFC 4001 Textual Conventions for Internet Network Addresses, 2005 RFC 4181 Guidelines for Authors and Reviewers of MIB Documents, Internet Engineering Task Force (IETF), September 2005 ITU-T X.208 Open Systems Interconnection Model and Notation \u2013 Specification of Abstract Syntax Notation One (ASN.1), 1988<sup>1</sup> ITU-T X.680(ISO/IEC 8824-1:2015) Information technology\u2014Abstract Syntax Notation One (ASN.1): Specification of basic notation ITU-T X.690(ISO/IEC 8825-1) Information technology\u2014ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER), and Distinguished Encoding Rules (DER) ITU-T X.696(ISO/IEC 8825-7) Information technology\u2014ASN.1 encoding rules: Specification of Octet Encoding Rules (OER) BIPM SI The International System of Units (SI) \u2014 9th edition (2019), https://www.bipm.org/documents/20126/41483022/SI-Brochure-9-EN.pdf"},{"location":"general/#other-references","title":"Other References","text":"<p>Other references are included to provide a more complete understanding of this document and its relationship to other documents.</p>"},{"location":"general/#other-resources-for-contributors","title":"Other Resources for Contributors","text":"<p>This document standardizes and tailors certain aspects of the information contained in open-sauced; however, it is not a complete replacement of that material. If you wish to learn more about open-source development, the following materials may be of interest:</p> Identifier Title IAB STD 8 (RFC 0854: 1983, Telnet Protocol Specification, and RFC 0855: 1983, Telnet Options Specifications; J. Postel, J. Reynolds) RFC 2021 Remote Network Monitoring Management Information Base Version 2 using SMIv2, 1997 RFC 2287 Definitions of System-level Managed Objects for Applications, 1998 RFC 2856 Textual Conventions for Additional High Capacity Data Types, 2000 RFC 2981 Event MIB, 2000 RFC 2982 Distributed Management Expression MIB, 2000 RFC 3014 Notification Log MIB, 2000 RFC 3231 Definitions of Managed Objects for Scheduling Management Operations, 2002 RFC 3411 An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks, 2002 RFC 3433 Entity Sensor Management Information Base, 2002 RFC 3877 Alarm Management Information Base (MIB), 2001 RFC 4268 Entity State MIB, 2005 RFC 6933 Entity MIB (Version 4), 2013 AASHTO / ITE / NEMA NTCIP 1201 v03 Global Object (GO) Definitions\u2014version 03, published March 2011 AASHTO / ITE / NEMA NTCIP 1202 v03 Object Definitions for Actuated Signal Controllers (ASC) Interface\u2014version 03A, published May 2019 AASHTO / ITE / NEMA NTCIP 8005 v02 Procedures for Creating Management Information Base (MIB) Files, Proposed ISO 26048-1:2025 <sup>2</sup> Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 1: Global Objects ISO/IEC 9834-1:2012 Information technology \u2014 Procedures for the operation of object identifier registration authorities: General procedures and top arcs of the international object identifier tree \u2014 Part 1: ISO/TS 20684-2:2021 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 2: Generalized field device basic management ISO/WD 20684-3 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 3: Triggers ISO/WD 20684-4 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 4: Notifications ISO/WD 20684-5 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 5: Logs ITU-T X.660 (07/2011) Identical to ISO/IEC 9834-1:2012. Recommended status. ISO/WD 20684-6 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 6: Commands ISO/WD 20684-7 Intelligent transport systems \u2013 Roadside modules SNMP data interface \u2013 Part 7: Support Features NEMA TS_2-2016 Traffic Controller Assemblies with NTCIP Requirements, 2016 IETF, Generic and Common Textual Conventions (TCs), https://trac.ietf.org/trac/ops/wiki/mib-common-tcs, accessed June 10, 2021 Perkins, D; McGinnis, E., Understanding SNMP MIBs, Prentice-Hall, Inc., 1997, ISBN 0-13-437708-7 Stallings, William, SNMP, SNMPv2, and CMIP: The Practical Guide to Network-Management Standards, Massachusetts, Addison-Wesley Publishing Company, 1993, ISBN 0-201-63331-0 Larmouth, John, ASN.1 Complete, Academic Press, a Harcourt Science and Technology Company, May 1999, ISBN 0-12233-435-3, http://www.oss.com/asn1/booksintro.html (October 9, 2000) Dubuisson, Olivier, ASN.1 Communication between Heterogeneous Systems, June 5, 2000, ISBN 0-12-6333361-0, http://www.oss.com/asn1/bookintro.html (October 9, 2000) Booch, Grady, Rumbaugh, James, Jacobson, Ivar, Unified Modeling Language User Guide, September 30, 1998, ISBN 0-20157-168-4 UML basics: An introduction to the Unified Modeling Language, www-106.ibm.com/developerworks/rational/library/769.html#N10090."},{"location":"general/#contact-information","title":"Contact Information","text":""},{"location":"general/#internet-documents","title":"Internet Documents","text":"<p>Obtain Request for Comment (RFC) electronic documents from several repositories online at:</p> <p>www.rfc-editor.orgwww.rfc-editor.org/repositories.html</p>"},{"location":"general/#architecture-reference-for-cooperative-and-intelligent-transportation-arc-it","title":"Architecture Reference for Cooperative and Intelligent Transportation (ARC-IT)","text":"<p>The Architecture Reference for Cooperative and Intelligent Transportation (ARC-IT) may be viewed online at:</p> <p>http://arc-it.net</p>"},{"location":"general/#iso-iec-and-isoiec-standards","title":"ISO, IEC, and ISO/IEC Standards","text":"<p>ISO, IEC, and ISO/IEC standards can be purchased on-line in electronic format or printed copy from:</p> <p>Techstreet6300 Interfirst Dr.Ann Arbor, MI 48108(800) 699-9277www.techstreet.com</p>"},{"location":"general/#ieee-standards","title":"IEEE Standards","text":"<p>IEEE standards can be purchased on-line in electronic format or printed copy from:</p> <p>Techstreet6300 Interfirst Dr.Ann Arbor, MI 48108(800) 699-9277www.techstreet.com</p>"},{"location":"general/#ntcip-standards","title":"NTCIP Standards","text":"<p>Copies of NTCIP standards may be obtained from:</p> <p>NTCIP CoordinatorNational Electrical Manufacturers Association1300 N.17th Street, Suite 900Rosslyn, Virginia 22209-3801www.ntcip.orge-mail: ntcip@nema.org</p> <p>Draft amendments, which are under discussion by the relevant NTCIP Working Group, and amendments recommended by the NTCIP Joint Committee are available.</p>"},{"location":"general/#general-statements","title":"General Statements","text":"<p>The remainder of this document is broken into the following chapters:</p> <ul> <li>Background: Describes the purpose of this document</li> <li>Object Identification: Discusses the object identifier tree and defines the nodes related to the NTCIP effort.</li> <li>Rules for Module Development: Defines the rules for developing MIB modules within the NTCIP standards efforts, including the specialized fields used by the NTCIP.</li> <li>Requirements for Agent Implementations: Requirements for implementations of agents that claim conformance to NTCIP standards.</li> <li>Guidelines for Agencies: Advice for agencies on operating NTCIP devices.</li> <li>NTCIP Structure of Management Information: The formal MIB module that defines the structure of the NTCIP portion of the object identifier tree and key textual conventions.</li> <li>Conversion from SMIv1 to SMIv2: Rules for converting SNMPv1 MIBs to support SNMPv3.</li> <li>Macro Examples: Examples of applying the rules defined in this document.</li> <li>History of Changes: A list of changes made with the current version from the last major version.</li> </ul>"},{"location":"general/#terms","title":"Terms","text":"<p>For the purposes of this document, the following terms and definitions apply. Terms not defined here are used in accordance with their definitions in ISO/IEC/IEEE 24765. Words not defined here or in ISO/IEC/IEEE 24765 are used in accordance with their definitions in Webster\u2019s New Collegiate Dictionary.</p> Term Definition agent The entity that receives requests and transmits responses to the received requests. block object type An object type that represents a standardized data structure of elemental object types. compatibility The ability of two or more systems or components to exchange information.[ISO/IEC/IEEE 24765] configurable object An object type that represents a data structure that can be configured at run-time to include elemental object types. context An instance of a management information base (MIB).NOTE\u2014A single SNMP agent (e.g., a unique UDP/IP address) typically represents a single context, but might support multiple contexts if it, for example, serves as the interface for multiple field devices (e.g., two dynamic message signs controlled by a single controller) or serves as a proxy agent for multiple field devices. When there are multiple contexts, there might be multiple object instances with the same object identifier and the context is used to disambiguate. current Reflecting the conditions at the present time (or at the time at which the data is time stamped) as determined by the Controller. Within the context of a status value, indicates the most up-to-date design of the element (e.g., user need, requirement, object). data Information before it is interpreted. datagram A self-contained unit of data transmitted independently of other datagrams. deprecated A status value that indicates the user need, requirement, dialog, or object is valid in limited circumstances, but has been replaced by another.NOTE\u2014This definition is modified from \u201cUnderstanding SNMP MIBS.\u201d Procurements can require support for deprecated objects to anable multi-version interoperability (e.g., backward compatibility) with legacy implementations. file A grouping of data into a single sequence of bytes that can be referred to by file operations.NOTE\u2014A file exists nominally in a directory, and can have an associated path. intelligent transportation systems (ITS) The application of advanced information processing and communications, sensing, and control technologies to surface transportation with the objective of promoting more efficient use of the existing highway and transportation network, increasing safety and mobility, and decreasing environmental impacts.NOTE\u2014Also known as \"intelligent transport systems\" International Organization for Standardization (ISO) An international standards organization.NOTE\u2014ANSI is the primary interface to ISO within the United States. Often thought to be International Standards Organization, because of its acronym ISO. internet A large collection of connected networks, primarily in the United States, running the Internet suite of protocols.NOTE\u2014Sometimes referred to as the DARPA Internet, NSF/DARPA Internet, or the Federal Research Internet. Interchangeable A condition which exists when two or more items possess such functional and physical characteristics as to be equivalent in performance and durability, and are capable of being exchanged one for the other without alteration of the items themselves, or adjoining items, except for adjustment, and without selection for fit and performance.Note: See National Telecommunications and Information Administration, U.S. Department of Commerce interoperability Degree to which two or more systems, products or components can exchange information and use the information that has been exchanged.[ISO/IEC/IEEE 24765] leaf object type An object type that does not have any sub-identifiers assigned (other than for object instances) management information base (MIB) A structured collection of managed information contained within a SNMP context. A MIB represents the instantiated data objects defined by one or more MIB modules and integrated into a device or management station. Management Station The computer system with which the device communicates. Typically, the management station commands and monitors the device. MIB module A sequence of NVT ASCII characters conforming to X.208 Abstract Syntax Notation One (ASN.1) and IAB STD 58. MIB modules are used to define the data objects that are to make up the instantiated objects of the MIB.NOTE\u2014A MIB module can be, and within NTCIP typically is, presented as both part of a standard and as a stand-alone, computer-readable text file. National Transportation Communications for ITS Protocol (NTCIP) A family of protocols that provide common control and data collection services as well as accommodating various system topologies and data routing duties.NOTE\u2014NTCIP is designed to support not only currently deployed systems, but also new systems and technologies as they become available. network A collection of devices connected by intermediate systems and populated by end systems. notification An unsolicited event message issued by an SNMP agent for a management station with an expectation of an acknowledgement. object An entity identified by a node on the international object identifier tree.NOTE \u2013 See object instance and object type, both of which are types of objects, along with any other entity that can be identified, such as a standard. This document attempts to use the most precise term within its text to assist in distinguishing among \"object type\" or \"object instance\". The use of the term \"object\" is typically limited to registering items on the international object identifier tree. OBJECT IDENTIFIER A unique name (identifier) that is associated with each type of object in a MIB that is a defined ASN.1 type. object instance An instance of an object type, which is an actual instance of data.NOTE \u2013 This document avoids using the term \u201cobject\u201d to describe this concept to prevent any ambiguity with an object referenced by the international object identifier tree or an object type. object type An abstract specification for a specific piece of data that can be instantiated within a device (zero or many times depending on how it is specified). It specifies the data using the OBJECT-TYPE macro. OBJECT-TYPE An X.208 ASN.1 macro used to define the meta-attributes of an object type in an SNMP MIB module. obsolete A status value that indicates the definition is no longer valid, was found to be flawed, was redundant, or was not useful.NOTE\u2014In the next (or some future) edition of a standard, any element (e.g., requirement, object) with a status of \u201cobsolete\u201d can be removed. This definition is modified from \u201cUnderstanding SNMP MIBS.\u201d protocol A specific set of rules, procedures, and conventions defining the format and timing of data transmissions between devices that are accepted and used to understand each other. Requirement A requirement describes a condition or capability to which a system shall conform; either derived directly from user needs, or stated in a contract, standard, specification, or other normative document. A desired feature, property, or behavior of a system. Requirements Traceability The ability to follow or study the logical progression among the needs, requirements, and design details in a step-by-step fashion. Simple Network Management Protocol (SNMP) A communications protocol developed by the Internet Engineering Task Force (IETF), used for configuration and monitoring of network devices. Trap An unsolicited event message issued by an SNMP agent for a management station without any expectation of an acknowledgement. User A person using the system that is developed. User Need The business or operational problem (opportunity) that is to be fulfilled to justify procurement or use.Note: While this is termed a \u201cuser need\u201d within the NTCIP community, it reflects needs of all stakeholders."},{"location":"general/#abbreviations","title":"Abbreviations","text":"<p>The abbreviations and acronyms used in this document are defined as follows:</p> ASCII American National Standard Code for Information Interchange ASN.1 Abstract Syntax Notation One, as defined by either ITU-T X.208 or ITU-T X.680 (ISO/IEC 8824-1) (within the context used, both apply) BER Basic Encoding Rules, as defined by ITU-T X.690 (ISO/IEC 8825-1) IAB STD Internet Architecture Board Standard IANA Internet Assigned Numbers Authority IEC International Electrotechnical Commission IEEE Institute of Electrical and Electronics Engineers IETF Internet Engineering Task Force IP Internet Protocol ITU-T International Telecommunication Union \u2013 Telecommunication Standardization Sector MVI Multi-Version Interoperability (formerly Backward Compatibility) NVT Network Virtual Terminal OER Octet Encoding Rules, as defined by ITU-T X.696 (ISO/IEC 8825-7) OSI Open Systems Interconnection PDU Protocol Data Unit PRL Protocol Requirements List RFC Request for Comments SMI Structure and Identification of Management Information SNMP Simple Network Management Protocol version 3 TCP Transport Control Protocol UML Unified Modeling Language X.208 ASN.1 Abstract Syntax Notation One, as defined by ITU-T X.208 X.680 ASN.1 Abstract Syntax Notation One, as defined by ITU-T X.680 (ISO/IEC 8824-1)"},{"location":"guidelines-for-operating-agencies/","title":"6 Guidelines for Agencies","text":""},{"location":"guidelines-for-operating-agencies/#guidelines-for-operating-agencies-informative","title":"Guidelines for Operating Agencies [Informative]","text":"<p>Operating agencies should be aware that there are cases where two or more management applications are potentially able to simultaneously access the same object. For example, the Global Database Management group does not prevent multiple management applications from accessing the data simultaneously. It is the responsibility of any agencies involved in inter-jurisdictional control to define procedures to ensure against this situation.</p>"},{"location":"history-of-changes/","title":"D History of Changes","text":""},{"location":"history-of-changes/#history-of-changes-informative","title":"History of Changes [Informative]","text":"<p>Annex D summarizes the changes made between the prior version of NTCIP 8004 and NTCIP 8004 v03.</p> <p>The migration of NTCIP from SNMPv1 to SNMPv3 required NTCIP 8004 to migrate from SMIv1 to SMIv2, which required fundamental changes in the way that NTCIP documents its object types. While the scope of NTCIP 8004 v03 is consistent with the scope of prior versions of NTCIP 8004, the details and references have changed considerably. The magnitude of this change resulted in a complete rewrite of the document, including:</p> <ol> <li>Updating references</li> <li>Rewriting Section 2 to be consistent with SNMPv3 message structure     and terminology</li> <li>Rewriting Section 3 to be consistent with the concepts and     terminology contained in ISO/IEC 9834-1 and to update the node     assignments under NEMA</li> <li>Rewriting Section 4 to be a profile of the SMIv2 and related IETF     RFCs</li> <li>Restructuring the document to consolidate all requirements for     implementations into Section 5</li> <li>Restructuring the document to consolidate guidelines for operating     agencies into Section 6</li> <li>Revising Annex A to conform with SMIv2 and deprecate items that are     no longer recommended</li> <li>Adding Annex B to define special rules from converting from SMIv1 to     SMIv2</li> <li>Updating and consolidating all examples into Annex C</li> <li>Updating Annex D.</li> </ol> <p>\u00a7</p>"},{"location":"introduction/","title":"Introduction","text":"<p>This document specifies a set of rules for organizing, describing, and defining transportation management information to be exchanged between transportation management applications and transportation equipment. This document is based on and extends of RFC 2578, RFC 2579, and RFC 2580.</p> <p>NTCIP 8004 contains mandatory requirements that are always applicable and optional and conditional requirements, which may be applicable, for the specification of transportation management information.</p> <p>This document contains four annexes with Annex A and Annex B identified as normative.</p> <p>The following keywords apply to NTCIP 8004:  AASHTO, ITE, NEMA, IEC, NTCIP, SMI, SNMP, process and control standard.</p> <p>This document only uses metric units.</p>"},{"location":"macro-examples/","title":"C Macro Examples","text":""},{"location":"macro-examples/#macro-examples-informative","title":"Macro Examples [Informative]","text":"<p>The following examples provide various examples of properly formatted invocations of the macros discussed by this document.</p> <p>NOTE---While the macros shown are similar to real invocations, the details are frequently shortened to save space and the macros often represent translations of SMIv1 entities for which the indicated SMIv2 translations have not yet been approved. The examples within this annex are strictly informative and provided as examples, they should not be interpreted as standardized information. To prevent any confusion, the formal OIDs in this section are shown with a parent node of \\\"example\\\".</p>"},{"location":"macro-examples/#module-identity-macro","title":"Module Identity Macro","text":"<pre><code>transportation MODULE-IDENTITY\n  LAST-UPDATED \\\"202212120500Z\\\"\n  ORGANIZATION \\\"NTCIP BSP2 WG\\\"\n  CONTACT-INFO\n    \"name: NTCIP Coordinator\n     email: ntcip@nema.org\n     postal: National Electrical Manufacturers Association\n             1300 North 17th Street, Suite 1752\n             Rosslyn, VA 22209-3801\n             USA\"\n  DESCRIPTION\n    \"NEMA delegated its sub-identifier 4 to the Joint Committee on the NTCIP\n     with its previously assigned descriptor of \\'transportation\\'. This MIB\n     defines the overall structure of NTCIP-defined management information\n     and textual conventions that are believed to be useful for a broad range\n     of applications.\"\n  REVISION \"202212120500Z\"\n  DESCRIPTION\n    \"Updated to SMIv2. Divided module into a separate NEMA managed parent\n     module and an NTCIP managed module. Commented out most sub-identifiers,\n     so that they can be assigned by the MODULE-IDENTITY macro within other\n     NTCIP standards. Formalized textual conventions.\\\"\n  REVISION \"200711290000Z\"\n  DESCRIPTION \"Added tmdd and ntcipTraps nodes.\"\n  REVISION \"200507190500Z\"\n  DESCRIPTION \n    \"MIB moved into NTCIP 8004 with updated module name and added\n     nodes for chap, modem, and tmdd.\"\n  REVISION \"200112010500Z\"\n  DESCRIPTION \"NEMA TS 3.2 republished as NTCIP 1101 v01.\"\n  REVISION \"199610010500Z\"\n  DESCRIPTION \"NEMA TS 3.2 approved.\"\n::= { example 1}\n</code></pre>"},{"location":"macro-examples/#object-identity-macro","title":"Object Identity Macro","text":"<pre><code>protocols OBJECT-IDENTITY\n  STATUS current\n  DESCRIPTION \"This node is the root of a subtree for protocol-related\n    management information, such as information related to 1) various layers\n    of the protocol stack, 2) profiles that cover several layers, 3) dynamic\n    object management, and NTCIP traps.\"\n::= { example 2 }\n</code></pre>"},{"location":"macro-examples/#conceptual-table-object-type","title":"Conceptual Table Object Type","text":"<pre><code>phaseTable OBJECT-TYPE\n  SYNTAX SEQUENCE OF PhaseEntry\n  MAX-ACCESS not-accessible\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; A table containing Controller Unit phase parameters.\n     The number of rows in this table is equal to the maxPhases object.\n     &lt;TableType&gt; static\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.x.1.2\"\n::= { example 3 }\n</code></pre>"},{"location":"macro-examples/#conceptual-row-object-type","title":"Conceptual Row Object Type","text":"<pre><code>phaseEntry OBJECT-TYPE\n  SYNTAX PhaseEntry\n  MAX-ACCESS not-accessible\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; Parameters for a specific Controller Unit phase.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.x.1.2.1\"\n  INDEX { phaseNumber }\n::= { example 4 }\n\nPhaseEntry ::= SEQUENCE {\n  phaseNumber Integer32,\n  phaseWalk Integer32,\n  phasePedestrianClear Integer32,\n  phaseMinimumGreen Integer32,\n  phaseYellowChange Integer32,\n  phaseRedClear Integer32 }\n</code></pre>"},{"location":"macro-examples/#row-status-object-type","title":"Row Status Object Type","text":"<pre><code>vacmAccessStatus OBJECT-TYPE\n  SYNTAX RowStatus\n  MAX-ACCESS read-create\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; The status of this conceptual row.\n       The RowStatus TC [RFC2579] requires that this\n       DESCRIPTION clause states under which circumstances\n       other objects in this row can be modified:\n       The value of this object has no effect on whether\n       other objects in this conceptual row can be modified.\n     &lt;Object Identifier&gt; 1.3.6.1.6.3.16.1.4.1.9\"\n::= { example 5 }\n</code></pre>"},{"location":"macro-examples/#enumeration","title":"Enumeration","text":"<pre><code>dmsMemoryMgmt OBJECT-TYPE\n  SYNTAX     INTEGER {\n               other (1), -- deprecated\n               normal (2),\n               clearChangeableMessages (3),\n               clearVolatileMessages (4) }\n  MAX-ACCESS read-write\n  STATUS mandatory\n  DESCRIPTION\n    \"&lt;Definition&gt; Allows the system to manage the device's memory. SNMP\n      Get operations on this object should always return normal (2).\n\n      clearChangeableMessages (3): the controller shall set dmsMessageStatus\n      for all changeable messages to notUsed (1), and release all memory\n      associated with changeable messages. This action does not affect any\n      changeable graphics or fonts.\n\n      clearVolatileMessages (4): the controller shall set dmsMessageStatus for\n      all volatile messages to notUsed (1), and release all memory associated\n      with volatile messages. This action does not affect any changeable\n      graphics or fonts.\n\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.3.6.16\"\n  DEFVAL {normal}\n::= { example 6 }\n</code></pre>"},{"location":"macro-examples/#integer32","title":"Integer32","text":"<pre><code>maxPhases OBJECT-TYPE\n  SYNTAX     Integer32 (2..255)\n  UNITS      \"phase\"\n  MAX-ACCESS read-only\n  STATUS     current\n  DESCRIPTION\n    \"&lt;Definition&gt; The Maximum Number of Phases this Controller Unit\n       supports. This object indicates the maximum rows which shall appear in\n       the phaseTable object.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.1.1.1\"\n::= { example 7 }\n</code></pre>"},{"location":"macro-examples/#gauge32","title":"Gauge32","text":"<pre><code>dcmBatteryVoltage OBJECT-TYPE\n  SYNTAX Gauge32 (0..255)\n  UNITS \"tenths of volts\"\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; Indicates the voltage of the battery at the time of the\n      request. The value range shall be 00.0-25.5V in 0.1 increments.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.9.2.2\"\n::= {example 8}\n</code></pre>"},{"location":"macro-examples/#counter32","title":"Counter32","text":"<pre><code>dcmVehicleSeqNum OBJECT-TYPE\n  SYNTAX Counter32 (0..65535)\n  MAX-ACCESS not-accessible\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; A number assigned to each vehicle that traverses a\n      sensor array. The numbers are assigned sequentially over all sensor\n      arrays. The starting value is not defined and the value shall roll over\n      to a value of 0 after reaching the maximum. This number along with a\n      time tag (controller-localTime) is used to uniquely identify vehicles.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.9.1.26\"\n::= {example 9}\n</code></pre>"},{"location":"macro-examples/#unsigned32","title":"Unsigned32","text":"<pre><code>dmsSignWidth OBJECT-TYPE\n  SYNTAX Unsigned32 (0..65535)\n  UNITS \"millimeters\"\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; Indicates the sign width in millimeters including the\n      border (dmsHorizontalBorder).\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.3.1.4\"\n::= { example 10 }\n</code></pre>"},{"location":"macro-examples/#object-identifier","title":"Object Identifier","text":"<pre><code>dcmVCOID OBJECT-TYPE\n  SYNTAX InstancePointer\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; This field contains the OID of a Vehicle Criteria\n      object that is supported by this device. The OID specified must be a\n      full OID from the root of the iso tree, relative OID's cannot be used.\n      This allows referring to objects outside of this MIB. The specified OID\n      can also be an OID from a table (if the object is only defined within a\n      table (e.g. Array Number), but it shall be the OID of the object from\n      the table in which the specified object is defined (e.g. if Array Number\n      is to be used, the OID shall be taken from the Logical IO To Array Map\n      Table.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.3.1.4\"\n::= {example 11 }\n</code></pre>"},{"location":"macro-examples/#bits","title":"BITS","text":"<pre><code>systemCameraEquipped OBJECT-TYPE\n  SYNTAX     BITS { cameraPower (0),\n                    heaterPower (1),\n                    wiper (2),\n                    washer (3),\n                    blower (4) }\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; A bit mapped value as defined below:\n      Bit When set, denotes the availability of a controllable:\n        0 Camera Power supply,\n        1 Heater Power supply,\n        2 Wiper,\n        3 Washer,\n        4 Blower\n      All other bits reserved.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.7.5.3\"\n::= {example 12}\n</code></pre>"},{"location":"macro-examples/#internet-address","title":"Internet Address","text":"<pre><code>intersectionAddressType OBJECT-TYPE\n  SYNTAX InetAddressType\n  ACCESS read-write\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; This object identifies the type of address stored in\n      intersectionAddress.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.10.2.2.1.13\"\nDEFVAL { ipv4 }\n::= { example 13 }\n\nintersectionAddress OBJECT-TYPE\n  SYNTAX InetAddress\n  ACCESS read-write\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; This object provides the Internet address for the entry\n      and shall be a unicast address.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.10.2.2.1.2\"\n  DEFVAL { '00000000'h }\n::= { example 13 }\n</code></pre>"},{"location":"macro-examples/#text","title":"Text","text":"<pre><code>fontName OBJECT-TYPE\n  SYNTAX SnmpAdminString (SIZE (0..64))\n  MAX-ACCESS read-write\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; Indicates the name of the font.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.3.3.2.1.3\"\n::= { example 14 }\n</code></pre>"},{"location":"macro-examples/#textual-convention-macro","title":"Textual Convention Macro","text":"<pre><code>MessageActivationCode ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \\\"2dm1dp1dt2dn2xc1d.1d.1d.1d\\\"\n  STATUS current\n  DESCRIPTION\n    \"The MessageActivationCode consists of those parameters required to\n     activate a message on a DMS. It is defined as an OCTET STRING containing\n     the OER-encoding of the following ASN.1 structure:\n\n     MessageActivationCodeStructure ::= SEQUENCE {\n       duration INTEGER (0..65535),\n       activatePriority INTEGER (0..255),\n       messageMemoryType INTEGER (0..255),\n       messageNumber INTEGER (0..65535),\n       messageCRC OCTET STRING (SIZE (2)),\n       sourceAddress OCTET STRING (SIZE (4))\n       }\n     where,\n     duration = the maximum amount of time, in minutes, the message may be\n     displayed prior to activating the dmsDefaultEndDurationMessage.\n     dmsMessageTimeRemaining shall be set to this value upon successful\n     display of the indicated message. A value of 65535 shall indicate an\n     infinite duration.\n\n     activatePriority = the activation priority of the message. If this value\n     is greater than or equal to the dmsMessageRunTimePriority of the\n     currently displayed message, the new message shall be displayed unless\n     errors are detected.\n\n     messageMemoryType = the dmsMessageMemoryType of the desired message.\n     messageNumber = the dmsMessageNumber of the desired message.\n     messageCRC = the dmsMessageCRC of the desired message.\n     sourceAddress = the 4-byte IPv4 address of the device that requested the \n                     activation.\n\n     For example, given the MULTI string '[jp3]TEST\n     \\[fl\\]Flashing[/fl]\\', stored in volatile memory slot 5 with no\n     beacons and no pixel service, the message ID Code is '04 00 05 95 F9'.\n     If this message is to be displayed for 267 minutes with activation\n     priority 55 from IP address 103.8.9.10, the message Activation Code is\n     '01 0B 37 04 00 05 95 F9 67 08 09 0A' in hex and would be displayed\n     to a user as the following based on the DISPLAY-HINT:\n     '267m55p4t5n95F9c103.8.9.10'.\"\n  SYNTAX OCTET STRING (SIZE 12))\n</code></pre>"},{"location":"macro-examples/#block-object-using-identifier-and-type","title":"Block Object Using Identifier and Type","text":"<p>As defined in Section 4.5.4, the definition of a Block Object consists of two parts:</p> <ol> <li> <p>The <code>OBJECT-TYPE</code> macro used for all object types and</p> </li> <li> <p>A definition of the data structure using a slightly modified version     of X.680 ASN.1, as defined in Clause 4.5.4.2; this definition can be     placed in a <code>TEXTUAL-CONVENTION</code>, in the <code>&lt;Definition&gt;</code> subclause of     the <code>OBJECT-TYPE</code> macro, or in a location external to the MIB module     and referenced.</p> </li> </ol> <p>The following uses the textual convention defined in Clause C.15.</p> <pre><code>dmsActivateMessage OBJECT-TYPE\n  SYNTAX MessageActivationCode\n  MAX-ACCESS read-write\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; A code indicating the active message. The value of this\n      object may be SET by a management station or modified by logic internal\n      to the DMS (e.g., activation of the end duration message, etc.).\n\n      When modified by internal logic with a reference to a message ID code,\n      the duration indicates 65535 (infinite), the activate priority indicates\n      255, and the source address indicates an address of 127.0.0.1.\n\n      If a GET is performed on this object, the DMS shall respond with the\n      value for the last message that was successfully activated.\n\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.3.6.3\"\n::= { example 16 }\n</code></pre>"},{"location":"macro-examples/#block-object-using-value-reference-and-a-defined-value","title":"Block Object Using Value Reference and a Defined Value","text":"<p>In the following example, because the fields within the ASN.1 structure are optional, a more meaningful value of DISPLAY-HINT cannot be provided. As a result, the object type macro references the ITSOerString.</p> <p>The reference to \\\"essNtcipCategory.0\\\" is an example of a valuereference that uses a number as an index. essTemperatureSensorHeight.x\\\" is an example of a valuereference that uses a DefinedValue as an index.</p> <pre><code>essStationMetaDataBlock OBJECT-TYPE\n  SYNTAX ITSOerString\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"&lt;Definition&gt; The OER-encoding of the following ASN.1 structure:\n        MessageActivationCodeStructure ::= SEQUENCE {\n            essNtcipCategory.0 OPTIONAL, -- @NTCIP1204-v03\n            essTypeOfStation.0 OPTIONAL, -- @NTCIP1204-v03\n            essLatitude.0 OPTIONAL, -- @NTCIP1204-v03\n            essLongitude.0 OPTIONAL, -- @NTCIP1204-v03\n            tempMetaData SEQUENCE OF TemperatureMetaData OPTIONAL\n            }\n\n        TemperatureMetaData ::= SEQUENCE {\n            essTemperatureSensorIndex.x OPTIONAL, -- @NTCIP1204-v03\n            essTemperatureSensorHeight.x OPTIONAL -- @NTCIP1204-v03\n            }\n\n      where,\n      x = the essTemperatureSensorIndex for the value being reported\n      For example, the following left-hand hexadecimal code would be decoded\n      as follows:\n\n      17           All optional fields other than essTypeOfStation are present\n      02           Category = \\'permanent\\'\n      02 50 AA 26  Latitude = 38.840870 degrees\n      F9 BD 2E AD  Longitude = -105.042259 degrees\n      02           Count for SEQUENCE OF = 2\n      03           Both optional fields are present\n      01           Index = 1\n      01           Height for index 1 = 1 meter\n      03           Both optional fields are present\n      02           Index = 2\n      05           Height for index 2 = 5 meters\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.4.2.5.2.15.4\"\n::= { example 17 }\n</code></pre>"},{"location":"macro-examples/#block-object-using-value-dereferencing","title":"Block Object Using Value Dereferencing","text":"<p>In the following example, the fields within the ASN.1 structure are not known at design time. Since a more meaningful value of DISPLAY-HINT cannot be provided, the object type macro references the ITSOerString.</p> <p>The reference to <code>essNtcipCategory.0</code> is an example of a <code>valuereference</code> that uses a number as an index. <code>essTemperatureSensorHeight.x</code> is an example of a <code>valuereference</code> that uses a <code>DefinedValue</code> as an index.</p> <pre><code>fdObjectGroupCurrentValue OBJECT-TYPE\n  SYNTAX ITSOerString\n  MAX-ACCESS read-only\n  STATUS current\n  DESCRIPTION\n    \"The OER encoded string of the following ASN.1 structure using the\n     refinements defined in Clause 4.5.4.2 of NTCIP 8004:\n     SEQUENCE {\n       *fdObjectGroupFieldObject.x.y.* -- @OBJECT-GROUP-MIB\n     }\n     where x and y represent the fdObjectGroupOwner and fdObjectGroupName of\n     the requested fdObjectGroupCurrentValue.\n\n     If an error occurs in retrieving any value, fdObjectGroupLastError shall\n     be updated to reflect the reported error and the value of this object\n     (fdObjectGroupCurrentValue) shall be a zero-length string. \"\n  REFERENCE \"NTCIP 1103 watchBlockValue\"\n::= {example 18}\n</code></pre>"},{"location":"macro-examples/#notification-type-macro","title":"Notification Type Macro","text":"<pre><code>sampleNotification NOTIFICATION-TYPE\n  OBJECTS { sampleObject }\n  STATUS current\n  DESCRIPTION\n    \"A sample notification.\"\n::= { example 19 }\n</code></pre>"},{"location":"macro-examples/#object-group-macro","title":"Object Group Macro","text":"<pre><code>essCharacteristicsGroup OBJECT-GROUP\n  OBJECTS { essNtcipCategory,\n            essNtcipSiteDescription,\n            essTypeOfStation,\n            essLatitude,\n            essLongitude,\n            essReferenceHeight }\n  STATUS current\n  DESCRIPTION\n    \"Management information that characterizes the ESS.\"\n::= {example 20}\n</code></pre>"},{"location":"macro-examples/#notification-group-macro","title":"Notification Group Macro","text":"<pre><code>sampleNotificationGroup NOTIFICATION-GROUP\n  NOTIFICATIONS { sampleNotification }\n  STATUS current\n  DESCRIPTION\n    \"Notifications included in this document.\"\n::= {example 21}\n</code></pre>"},{"location":"macro-examples/#module-compliance-macro","title":"Module Compliance Macro","text":"<p>sampleCompliance MODULE-COMPLIANCE   STATUS current   DESCRIPTION     \"The conformance statement for this sample\"   MODULE -- this module   MANDATORY-GROUPS {       essCharacteristicsGroup,       sampleNotificationGroup } ::= {example 22}</p>"},{"location":"notices/","title":"Notices","text":""},{"location":"notices/#copyright","title":"Copyright","text":"<p>This document, including the management information base (MIB) defined herein, is licensed under the Creative Commons Attribution 4.0 International License (CC-BY 4.0) with additional terms and conditions MIB. By accessing, using, or contributing to the document, you agree to be bound by the terms of this Agreement, which includes the CC-BY 4.0 License and the additional provisions herein. By contributing to the document, you grant the NTCIP a perpetual, worldwide, non-exclusive, royalty-free license to use, modify, and incorporate your contributions into the document.</p> <p>Except for the MIB, you are free to share (copy and redistribute the material in any medium or format) and adapt (remix, transform, and build upon the material) for any purpose, even commercially, as long as you give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</p>"},{"location":"notices/#additional-terms-and-conditions","title":"Additional Terms and Conditions","text":"<p>In addition to the terms of CC-BY 4.0, the following provisions apply to the use, distribution, and adaptation of the MIB:</p>"},{"location":"notices/#1-additional-definitions","title":"1. Additional Definitions","text":"<p>a. \"MIB\" refers to the Management Information Base specification, including its textual content and structure, developed as part of the standards effort. b. \"NTCIP\" refers to AASHTO / ITE / NEMA, who maintain and govern the MIB and its associated Object Identifiers (OIDs).</p>"},{"location":"notices/#2-restrictions-on-oid-modifications","title":"2. Restrictions on OID Modifications","text":"<p>a. Adapted Material may not redefine existing OIDs or define new OIDs under the \"nema\" node (1.3.6.1.4.1.1206). b. Any proposed modifications or extensions to the MIB that involve OIDs under the \"nema\" node must be submitted to the NTCIP for review and approval. c. Adapted Material must clearly indicate that it is not part of the official MIB and must not claim to represent an NTCIP MIB.</p>"},{"location":"notices/#3-no-warranty","title":"3. No Warranty","text":"<p>The MIB is provided \"as is\" without warranty of any kind, express or implied, including but not limited to warranties of merchantability, fitness for a particular purpose, or non-infringement. The NTCIP does not warrant that the MIB will meet your requirements or be error-free.</p>"},{"location":"notices/#4-limitation-of-liability","title":"4. Limitation of Liability","text":"<p>In no event shall the NTCIP or its contributors be liable for any direct, indirect, incidental, special, or consequential damages arising out of the use or inability to use the MIB, even if advised of the possibility of such damages.</p>"},{"location":"notices/#content-and-liability-disclaimer","title":"Content and Liability Disclaimer","text":"<p>The information in this publication was considered technically sound by the consensus of persons engaged in the development and approval of the document at the time it was developed. Consensus does not necessarily mean that there is unanimous agreement among every person participating in the development of this document.</p> <p>AASHTO, ITE, and NEMA standards and guideline publications, of which the document contained herein is one, are developed through a voluntary consensus standards development process. This process brings together volunteers and seeks out the views of persons who have an interest in the topic covered by this publication. While AASHTO, ITE, and NEMA administer the process and establish rules to promote fairness in the development of consensus, they do not write the document and they do not independently test, evaluate, or verify the accuracy or completeness of any information or the soundness of any judgments contained in their standards and guideline publications.</p> <p>AASHTO, ITE, and NEMA disclaim liability for any personal injury, property, or other damages of any nature whatsoever, whether special, indirect, consequential, or compensatory, directly or indirectly resulting from the publication, use of, application, or reliance on this document. AASHTO, ITE, and NEMA disclaim and make no guaranty or warranty, express or implied, as to the accuracy or completeness of any information published herein, and disclaims and makes no warranty that the information in this document will fulfill any of your particular purposes or needs. AASHTO, ITE, and NEMA do not undertake to guarantee the performance of any individual manufacturer or seller's products or services by virtue of this standard or guide.</p> <p>In publishing and making this document available, AASHTO, ITE, and NEMA are not undertaking to render professional or other services for or on behalf of any person or entity, nor are AASHTO, ITE, and NEMA undertaking to perform any duty owed by any person or entity to someone else. Anyone using this document should rely on his or her own independent judgment or, as appropriate, seek the advice of a competent professional in determining the exercise of reasonable care in any given circumstances. Information and other standards on the topic covered by this publication may be available from other sources, which the user may wish to consult for additional views or information not covered by this publication.</p> <p>AASHTO, ITE, and NEMA have no power, nor do they undertake to police or enforce compliance with the contents of this document. AASHTO, ITE, and NEMA do not certify, test, or inspect products, designs, or installations for safety or health purposes. Any certification or other statement of compliance with any health or safety-related information in this document shall not be attributable to AASHTO, ITE, or NEMA and is solely the responsibility of the certifier or maker of the statement.</p>"},{"location":"notices/#trademark-notice","title":"Trademark Notice","text":"<p>NTCIP is a trademark of AASHTO / ITE / NEMA. All other marks mentioned in this project are the trademarks of their respective owners.</p>"},{"location":"object-identification/","title":"3 Object Identification","text":"<ol> <li> <p>ISO 9834-1 uses the term \"arc\" instead of \"node\".\u00a0\u21a9</p> </li> <li> <p>SNMP limits access to the first 2\\^32-1 nodes at any one level and to 128 levels, but from a practical perspective, this is still nearly limitless.\u00a0\u21a9</p> </li> <li> <p>A context represents a coherent \"collection of management information\". Often, a physical controller will have a single context, but a single physical controller could control multiple NTCIP devices (e.g., multiple message signs, multiple traffic signals, etc.) and/or serve as a proxy agent to multiple non-NTCIP devices. In this case, each device should be assigned a separate context within the controller so that the management information for each device is kept as distinctly separate instances.\u00a0\u21a9</p> </li> </ol>"},{"location":"object-identification/#object-identification-normative","title":"Object Identification [Normative]","text":"<p>SNMP allows managers and agents to implement MIB modules from multiple independent sources. Allowing this combination of object types presents a potential for naming conflicts (i.e., two sources defining different pieces of data using the same name). SNMP overcomes this challenge by identifying object types using the international object identifier tree, as defined by the ISO/IEC 9834-1 standard.</p>"},{"location":"object-identification/#international-object-identifier-tree","title":"International Object Identifier Tree","text":"<p>The international object identifier tree consists of three root nodes<sup>1</sup>. Each root node can be assigned multiple sub-nodes. Each sub-node may, in turn, have sub-nodes of its own.</p> <p>Each node, whether a root node or a sub-node, is managed by some organization. For example, the three root nodes are managed by ISO, the International Telecommunication Union Telecommunication Standardization Sector (ITU-T), and jointly by ISO and ITU-T. The manager of any node may delegate the management responsibility for any sub-node underneath its branch. In this case, the delegated node is termed a subtree. Just as any sub-node may have its own set of sub-nodes, subtrees can have their own subtrees.</p> <p>Except for the first two root nodes (which are limited to 40 sub-nodes each), the number of sub-nodes that any node may have is unlimited. Likewise, the number of sub-node levels is unlimited. As a result, the international object identifier tree can contain an unlimited number of nodes using a tree structure managed by multiple organizations.<sup>2</sup></p>"},{"location":"object-identification/#node-identification","title":"Node Identification","text":"<p>Each node is assigned an integral number and optionally a label. The label is called the <code>OBJECT DESCRIPTOR</code> and provides a user-friendly textual name that can concisely express what the node is intended to represent. While the <code>OBJECT DESCRIPTOR</code> provides a useful human-language term to describe the node and should be designed to be unique within the scope of other sibling nodes of the same branch and level, there is no guarantee that it is unique within the entire international object identifier tree. Nonetheless, any node can be uniquely defined by following the sequence of nodes from the root to the specific node that needs to be identified. Unfortunately, this can produce a rather lengthy description since each name might consist of several characters. Alternatively, the same identifier can be produced by using the integral numbers assigned to each node rather than the <code>OBJECT DESCRIPTOR</code>s. This representation typically results in a much more compact identifier that can more easily be processed by computers. This ordered list of integral values is called an <code>OBJECT IDENTIFIER</code>, which is known to identify a globally unique position on the identifier tree when properly registered.</p> <p>The globally unique identifier can be used for any purpose for which an identifier may be useful. For example, most standards organizations have been assigned an <code>OBJECT IDENTIFIER</code> for the purposes of identification. The tree can also be used for managing groups of related data. For example, all objects related to an Actuated Signal Controller are organized under a node defined as 'asc'. In short, these attributes are a means for identifying some object, regardless of the semantics associated with the object.</p>"},{"location":"object-identification/#object-identifiers-and-snmp","title":"Object Identifiers and SNMP","text":"<p>Within SNMP, the international object identifier tree is used to register object types with globally unique identifiers. The formal assignment of an <code>OBJECT IDENTIFIER</code> to each object type is contained in the MIB module.</p> <p>SNMP also identifies object instances by using the international object identifier tree, but with a slight twist in that the instance portion of the identifier is only unique within its SNMP agent and context<sup>3</sup> -- not globally unique. For example, while the MIB provides a globally unique identifier for the object type of <code>essAirTemperature</code>, there might be multiple environmental sensor stations each containing multiple air temperature sensors. To identify a specific object instance within a specific environmental sensor station, SNMP extends the object type object identifier with an instance identifier (e.g., <code>essAirTemperature.1</code> to identify the reading from the first sensor). However, the instance value is not unique across different SNMP agents (i.e., every environmental sensor station will use <code>essAirTemperature.1</code> to identify the reading from its first air temperature sensor). The SNMP manager is responsible for distinguishing among these readings by combining the object instance identifier with the network address of the device and the context used within the message.</p>"},{"location":"object-identification/#registered-nodes","title":"Registered Nodes","text":""},{"location":"object-identification/#root-nodes","title":"Root Nodes","text":"<p>The first two root nodes of the naming tree are administered by ITU-T (<code>itu-t</code>) and ISO (<code>iso</code>). The third node is jointly administered by ISO and ITU-T (<code>joint-iso-itu-t</code>, or sometimes shortened to <code>joint</code>).</p> <p>NOTE---Until 1991, the U.S. name-registration authority conducted its business under the <code>{iso(1) member-body(2) us(840)}</code> arc, registering names for ANSI standards, private organizations with U.S. national standing, and the names of U.S. states and \"state equivalents.\" In 1991, changes in the registration authority procedures standard ISO/IEC 9834 (ITU-T X.660) invalidated this procedure, requiring private organization names with national standing to be registered under the <code>{joint-iso-itu-t(2) country(16) us(840)}</code> arc. The existing register of private organization names moved, in fact, from the <code>{1 2 840}</code> arc to the <code>{2 16 840 1}</code> arc, with ANSI serving as the registration authority. Therefore, two equivalent prefixes exist (in perpetuity) for currently registered organization names. Post-1991 registrations are made only under the <code>{2 16 840 1}</code> arc, and organizations with pre-1991 registrations are encouraged (but not required) to construct no new identifiers under the <code>{1 2 840}</code> arc. Various sources provide current OID descriptions, including www.oid-info.com/index.htm.</p> <p>NOTE--- The International Telecommunication Union Telecommunication Standardization Sector (ITU-T) is the part of ITU (an agency of the United Nations) that provides standards for telecommunication equipment and systems. The Consultative Committee for International Telephony and Telegraphy (CCITT) was renamed ITU-T in 1993. The <code>itu-t(0)</code> arc is also named <code>ccitt</code> in remembrance that CCITT was previously an organization independent from ITU-T. Similarly, the <code>joint-iso-itu-t(2)</code> arc is also named <code>joint-iso-ccitt</code>.</p>"},{"location":"object-identification/#nema-node","title":"NEMA Node","text":"<p>Under the <code>iso</code> node, ISO has designated one subtree for use by other (inter)national organizations (org). Under that subtree, one of the U.S. National Institute of Standards and Technology nodes is assigned to the U.S. Department of Defense (dod). The initial development of the Internet was a Department of Defense project and, therefore, the Internet community was assigned a node in the <code>dod</code> subtree. The Internet Architecture Board (IAB) administers the <code>internet</code> node. The descriptive name <code>internet</code> is defined as:</p> <pre><code>internet OBJECT IDENTIFIER ::= { iso org dod 1 }\n</code></pre> <p>(also known as 1.3.6.1)</p> <p>Because of the ease of obtaining a node from IAB, NEMA requested and received a node that NEMA administers. This node is defined as:</p> <pre><code>nema OBJECT IDENTIFIER ::= { iso org dod internet private enterprise 1206 }\n</code></pre> <p>(also known as 1.3.6.1.4.1.1206)</p> <p>All NTCIP-defined data related to device data dictionaries or protocols shall be defined under the NEMA branch of the tree. The organization of the naming tree down to the <code>nema</code> node is shown in Figure 3. The figure also shows the node for the ITS industry as used by the ISO 20684 standard series.</p> <p>Portion of ISO Global Tree Showing Location of NEMA Node</p> <p>The subtree for the NEMA node is shown in Figure 4. The description of each of the nodes are found in Annex A.1.</p>"},{"location":"requirements-for-agent-implementations/","title":"5 Requirements for Implementations","text":"<ol> <li> <p>Clause 7.9 of RFC 2578 indicates that implementing the default value is optional. This clause makes it recommended.\u00a0\u21a9</p> </li> </ol>"},{"location":"requirements-for-agent-implementations/#requirements-for-agent-implementations-normative","title":"Requirements for Agent Implementations [Normative]","text":""},{"location":"requirements-for-agent-implementations/#agent-capabilities","title":"Agent Capabilities","text":"<p>Manufacturers supplying transportation equipment should make AGENT-CAPABILITIES statements available for their equipment. All manufacturers need to obtain a vendor number from either NEMA or IANA prior to creating MIB modules that have manufacturer-specific data.</p>"},{"location":"requirements-for-agent-implementations/#requirements-for-non-standard-mibs","title":"Requirements for Non-Standard MIBs","text":"<p>All MIB modules shall conform to the basic compilation rules defined for SMIv2 in addition to the requirements defined within this section. Developers of non-standard MIB modules are encouraged to adopt the requirements defined in this document to the extent to which they might apply.</p>"},{"location":"requirements-for-agent-implementations/#default-values","title":"Default Values","text":"<p>The value specified in a <code>DEFVAL</code> clause should be used when initializing a new object instance (e.g., during reboot or row creation), if feasible unless another value is provided. <sup>1</sup></p>"},{"location":"requirements-for-agent-implementations/#extensions-of-standardized-enumerations","title":"Extensions of Standardized Enumerations","text":"<p>Unless stated otherwise within an object type <code>&lt;Definition&gt;</code> subclause, a <code>NamedNumber</code> (i.e., an enumerated item in an enumeration) that is assigned an identifier of \"other\" shall be treated as a read-only value. An attempt to set an object instance to a read-only value shall return an error (<code>wrongValue</code> in the case of SNMPv3).</p> <p>Unless normative text is added to specifically prohibit the use of the <code>other</code> state, a user- or manufacturer-specific object shall be permitted to define an object specification that extends the possible states, For example, NTCIP 1202:2005 includes the following object:</p> <pre><code>coordCorrectionMode OBJECT-TYPE\nSYNTAX      INTEGER { other (1),\n                      dwell (2),\n                      shortway (3),\n                      addOnly (4) }\nMAX-ACCESS  read-write\nSTATUS      mandatory\nDESCRIPTION\n\"&lt;Definition&gt; This object defines the Coord Correction\nMode. The possible modes are:\nother: the coordinator establishes a new offset by\n   a mechanism not defined in this standard.\ndwell: when changing offset, the coordinator shall\n   establish a new offset by dwelling in the coord\n   phase(s) until the desired offset is reached.\nshortway (Smooth): when changing offset, the\n   coordinator shall establish a new offset by\n   adding or subtracting to/from the timings in a\n   manner that limits the cycle change. This\n   operation is performed in a device specific\n   manner.\naddOnly: when changing offset, the coordinator\n   shall establish a new offset by adding to the\n   timings in a manner that limits the cycle\n   change. This operation is performed in a device\n   specific manner.\n...\n</code></pre> <p>To define a new correction mode, something like the following proprietary object could be used:</p> <pre><code>xxxCoordCorrectionModeExt OBJECT-TYPE\nSYNTAX      INTEGER { other (1),\n                      subOnly (2) }\nMAX-ACCESS  read-write\nSTATUS      mandatory\nDESCRIPTION\n\"&lt;Definition&gt; This object defines an extension to the Coord\nCorrection Mode as defined in NTCIP 1202. The possible modes are:\nother: the coordinator establishes a new offset according to\n   NTCIP-1202::coordCorrectionMode.\nsubOnly: when changing offset, the coordinator shall\n   establish a new offset by subtracting from the timings in such a\n   manner that limits the cycle change. This operation is performed\n   in a device specific manner\n...\n</code></pre> <p>In this case, setting <code>xxxCoordCorrectionModeExt</code> equal to <code>subOnly</code> forces <code>coordCorrectionMode</code> equal to <code>other</code>. Setting <code>coordCorrectionMode</code> equal to <code>shortway</code> forces <code>xxxCoordCorrectionModeExt</code> equal to <code>other</code>.</p>"},{"location":"rules-for-module-development/","title":"4 Rules for Module Development","text":""},{"location":"rules-for-module-development/#rules-for-module-development-normative","title":"Rules for Module Development [Normative]","text":"<p>Except as otherwise stated within this section and in Annex B, all NTCIP MIB modules shall conform to:</p> <ol> <li>IAB STD 58, which includes:<ol> <li>RFC 2578,</li> <li>RFC 2579, and</li> <li>RFC 2580.</li> </ol> </li> <li>RFC 3584</li> <li>RFC 4181</li> <li>The additional constraints and conventions defined in this section</li> </ol> <p>Annex B defines allowed exceptions that only apply when converting NTCIP MIB modules from the IAB STD 16 (SMIv1) format to the IAB STD 58 (SMIv2) format.</p> <p>NOTE -- SMIv2 is the second version of the SMI but is used as the MIB module format for SNMPv3.</p>"},{"location":"rules-for-module-development/#general","title":"General","text":"<p>The original text of the RFCs is indispensable for a full understanding of the MIB module format; however, RFCs are typically written in a conversational/explanatory tone which can result in redundancies and ambiguities as to the conformance status of each requirement. Further, some requirements in the referenced RFCs are written to only be applicable to IETF standard MIB modules while others are for non-standard MIB modules and tend to be from a technical perspective of what is allowed as opposed to what should be done. The conformance requirements adopted by NTCIP are intended to establish a policy for writing NTCIP standard MIB modules and as a result reflect a slightly different mix of conformance statuses from what the IETF has defined. Finally, the requirements for developing a MIB module are scattered over multiple RFCs, which describe not only the rules for writing the MIB modules but also on implications to implementations.</p> <p>The tables presented in this section clarify and highlight the conformance status of certain requirements and is limited to those rules related to writing standard NTCIP MIB modules. Rules that are specified within X.208 and within the information modules defined within the referenced RFCs are omitted as they are unambiguous, and no changes are made. This document focuses on the requirements that are only defined within the text (non-module) sections of the RFCs.</p> <p>This document groups requirements by topic, regardless of the source of the requirement. Each requirement is listed in a tabular format with an item number that allows for easy referencing. The tabular format consists of the following columns:</p> <ul> <li> <p>Item: provides a unique identifier for the requirement.</p> </li> <li> <p>Requirement: A requirement stated as a \\\"shall\\\" statement. This   almost always requires a rewording of the statement compared with   original RFC text.</p> </li> <li> <p>RFC: When the requirement represents an additional constraint or   convention of this document, this column is blank; otherwise, it   identifies the RFC number from which the requirement originates.</p> </li> <li> <p>Clause: When the requirement represents an additional constraint or   convention of this document, this column is blank; otherwise, it   identifies the location of the requirement within the referenced RFC   in the following format:</p> </li> </ul> <p><code>&lt;clause&gt;\"p\"&lt;paragraph&gt;</code></p> <p>where,</p> <ul> <li> <p><code>&lt;clause&gt;</code> indicates the clause number of the RFC where the   requirement appears<sup>1</sup></p> </li> <li> <p><code>&lt;paragraph&gt;</code> indicates an ordered integral position of the paragraph   within the indicated clause where the requirement appears (numbered   and bulleted items are considered to be a part of the prior paragraph)</p> </li> <li> <p>RFC status: An indication of the conformance status of the requirement   as interpreted from the RFC for RFC standard MIB modules.</p> </li> <li> <p>NTCIP status: An indication of the conformance status of the   requirement for NTCIP standard MIB modules.</p> </li> </ul> <p>The codes used within the status columns are defined as follows:</p> <p>Table 1: Status Codes</p> Code Meaning m Mandatory r Recommended o Optional o.# An option group where at least one of the items with the same number (#) must be supported d Discouraged x Prohibited c Conditional <p>Status codes may be supplemented with footnotes that provide further details.</p> <p>Any violations of the requirements contained within this document shall not negate the intent of any statement contained in a document or MIB module based on this document.</p> <p>Non-standard (e.g., manufacturer-specific) MIB modules are outside the scope of this document.</p>"},{"location":"rules-for-module-development/#rules-for-modules","title":"Rules for Modules","text":""},{"location":"rules-for-module-development/#general-rules-for-modules","title":"General Rules for Modules","text":"<p>Requirements for the construction of X.208 modules within NTCIP standards are shown in Table 6. Most X.208 modules defined within NTCIP standards are MIB modules (i.e., they use the OBJECT-TYPE and/or the NOTIFICATION-TYPE macros). NTCIP standards also include a small number of other module types, such as the NTCIP8004-NEMA module, contained in Annex A of this document, which does not include any OBJECT-TYPE or NOTIFICATION-TYPE macros. The requirements presented in Table 2 apply to all X.208 modules contained in NTCIP standards.</p> <p>Table 2: General Rules for Modules</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.2.1.a MIB\u00a0X.208\u00a0modules shall conform to the adapted subset of X.208 ASN.1 as specified in IAB STD 58 2578 1p1 m m 4.2.1.b Each modulereferernce (i.e., module name) shall be unique across all standard modules 2578 3p6 m m[1] 4.2.1.c Each\u00a0NTCIP module\u00a0shall have a modulereference (i.e.,\u00a0name) that\u00a0follows\u00a0the form:NTCIP&lt;StandardNumber&gt;-&lt;NodeName&gt;where,&lt;StandardNumber&gt; is the four-digit standard number&lt;NodeName&gt; is the name of the MODULE-IDENTITY\u00a0descriptor\u00a0in UpperCamelCaseExample: NTCIP1201-RecMechV2 r 4.2.1.d Each\u00a0versionrevision[2]\u00a0of a module\u00a0(e.g., as contained in a new version of a standard)\u00a0shall use the same modulereference\u00a0(i.e., module name) 2578 3p6 r x<sup>7</sup>m<sup>7</sup>[A1] 4.2.1.e Modules shall use an empty AssignedIdentifier (i.e., there shall not be an OID between the module name and the \u201cDEFINITIONS\u201d keyword) 2578 3p6 m m 4.2.1.f Modules shall not IMPORT any \u201cUNIVERSAL\u201d types defined by ASN.1[A2] 2578 3.2p4 m m 4.2.1.g Modules shall not IMPORT the BITSconstruct[A3] 2578 3.2p4 m m 4.2.1.h Modules shall not IMPORT items not\u00a0used[A4] 4181 4.4p4 r mr 4.2.1.i Modules shall not define additional X.208 ASN.1 macros 2578 3p5 m m 4.2.1.j Modules shall not IMPORT or use SMIv1\u00a0macros[A5] 2578 3p5 m m 4.2.1.k Normative text shall not be placed in module comments 2578 3.4p1 r m 4.2.1.l A standard containing a MIB module shall contain certain defined sections 4181 3p2 m m[3]\u00a0[2] 4.2.1.m A text-only, electronic version of the MIB module shall be produced per the rules of NTCIP 8005 - - - m 4.2.1.n Clause numbers included in the standardized NTCIP document shall be converted into comments in the electronic version of the MIB module - - - m 4.2.1.o A standards-track MIB module shall be reviewed by an approved steward 4181 1p1 m m\u00a0[1] 4.2.1.p The rules defined in this document\u00a0shall\u00a0be waived when justification is fully documented 4181 4.9p9 o o[4]"},{"location":"rules-for-module-development/#rules-for-module-components","title":"Rules for Module Components","text":"<p>The components contained within a module should follow a consistent order to facilitate use. The requirements for components of an NTCIP module are shown in Table 3.</p> <p>Rules for Module Components</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.2.2.a Modules shall not use the EXPORTS statement 2578 3.3p1 m m 4.2.2.b Modules shall use the IMPORTS statement to import all referenced external objects, including the referenced types and macros defined in [RFC 2578], [RFC 2579], and [RFC 2580] as needed 2578 3.2p1 m m 4.2.2.c The module shall include exactly one MODULE-IDENTITY macro immediately after the IMPORTS statement 2578 3p7 m m 4.2.2.d The module shall define any local TEXTUAL-CONVENTIONs immediately after the MODULE-IDENTITY macros - r 4.2.2.e The module shall present any OBJECT-IDENTITY, OBJECT-TYPE, and NOTIFICTION-TYPE macros after and and all TEXTUAL-CONVENTIONs contained in the module - r 4.2.2.f The module shall define at least one MODULE-COMPLIANCE macro 2580 5p2 c[1] c[2] 4.2.2.g The module shall define the MODULE-COMPLIANCE macro after all OBJECT-TYPEs and NOTIFICATION-TYPEs contained in the module - r 4.2.2.h The module shall define OBJECT-GROUPs and NOTIFICATION-GROUPs after all MODULE-COMPLIANCE statements contained in the module - r"},{"location":"rules-for-module-development/#rules-for-updating-a-module","title":"Rules for Updating a Module","text":"<p>Rules for Updating a Module</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.2.3.a Macro invocations (i.e., definitions) shall not be moved from one module to another 2578 10p3 r r[1] 4.2.3.b Macro invocations (e.g., even with a status of \u201cobsolete\u201d) shall not be removed from an updated module 4181 10p4 m m 4.2.3.c Normative changes shall not be made to macro invocations (when necessary, a new macro invocation will be used instead) 4181 10.1p1 m m 4.2.3.d New macro invocations shall be defined 4181 10.2p1 o o"},{"location":"rules-for-module-development/#rules-for-values","title":"Rules for Values","text":""},{"location":"rules-for-module-development/#rules-for-descriptors","title":"Rules for Descriptors","text":"<p>RFC 2578 uses the term \"descriptor\" to refer to the concepts that X.208 terms a \"valuereference\" and it appears to be intended to apply to \"typereferences\" as well.</p> <p>X.208 requires a valuereference to begin with a lowercase letter and the statement takes the form \\&lt;valuereference&gt; \\&lt;macro&gt; ::= \\&lt;value&gt;. X.208 requires a typereference to begin with an uppercase letter and the statement takes the form \\&lt;typereference&gt; ::= \\&lt;macro&gt;. For example, the name \"essAirTemperature\" is a valuereference; the name \"DisplayString\" is a typereference.</p> <p>This document defines \"descriptor\" to mean \"either an X.208 valuereference or typereference\" to avoid some ambiguities and misleading statements that exist in RFC 2578. The specific NTCIP requirements for a descriptor are defined in Table 5.</p> <p>Table: Rules for Descriptors</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.3.1.a Descriptors shall be unique within a module 2578 3.1p3 m m 4.3.1.b Descriptors shall be mnemonic 2578 3.1p3 m m 4.3.1.c Descriptors shall not be longer than 64 characters in length 2578 3.1p3 m m 4.3.1.d Descriptors shall not be longer than 32 characters in length 2578 3.1p3 o[1] o 4.3.1.e Descriptors shall be unique across all standard modules that are likely to be included within NTCIP devices[2] 2578 3.1p4 m m[3] 4.3.1.f Descriptors shall start with the name of the device-type descriptor or an abbreviation thereof to promote understanding and uniqueness r 4.3.1.g Descriptors shall include a suffix that indicates a version number of any object type that is a replacement object type (e.g.,\u00a0essSurfaceConductivityV2) r[4] 4.3.1.h If an imported descriptor is duplicated (e.g., same term imported from two different modules) the importing module shall use the Externalvaluereference (or Externaltypereference) format when referring to it (e.g., \u201c.\u201d) 2578 3.2p2 m m 4.3.1.i A descriptor (i.e., the term itself) shall not change after it is standardized 2578 3.6p1 m m 4.3.1.j A descriptor shall not be associated with more than one meaning 2578 3.6p1 m m 4.3.1.k A descriptor shall not be associated with more than one OBJECT IDENTIFIER 2578 3.6p1 m m 4.3.1.l A revision shall not change the semantics of any standardized descriptor 2578 3.6p1 m m"},{"location":"rules-for-module-development/#rules-for-object-identifier-values","title":"Rules for OBJECT IDENTIFIER Values","text":"<p>Table 6 defines additional requirements related to the assignment of OBJECT IDENTIFIER values.</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.3.2.a. OBJECT IDENTIFIER values shall not exceed 128 sub-identifiers 2578 3.5p1 m m 4.3.2.b. The value of each sub-identifier within an OBJECT IDENTIFIER value shall not exceed 2\\^32-1 2578 3.5p1 m m 4.3.2.c. An assignment of an OBJECT IDENTIFIER value shall not contain a NameForm component 2578 3.6p1 m m : Rules for OBJECT IDENTIFIER Values"},{"location":"rules-for-module-development/#rules-for-macros","title":"Rules for Macros","text":""},{"location":"rules-for-module-development/#rules-for-module-identity-macro","title":"Rules for MODULE-IDENTITY Macro","text":"<p>The MODULE-IDENTITY macro is used to identify who is responsible for the MIB and to show the history of revisions. Requirements for the completion of the MODULE-IDENTITY macro within an NTCIP MIB module are as shown in Table 7.</p> <p>Rules for the MODULE-IDENTITY Macro</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.1.a The LAST-UPDATED clause shall indicate the date and time that this module was last edited 2578 5.1p1 m m 4.4.1.b The ORGANIZATION clause shall provide the full name of the working group 4181 4.5p2 m m 4.4.1.c The CONTACT-INFO clause shall include the name of the person to whom technical queries should be sent 2578 5.3p1 m m[1] 4.4.1.d The CONTACT-INFO clause shall include the postal address of the person to whom technical queries should be sent 2578 5.3p1 m m<sup>19</sup> 4.4.1.e The CONTACT-INFO clause shall include the telephone number of the person to whom technical queries should be sent 2578 5.3p1 m x 4.4.1.f The CONTACT-INFO clause shall include an email address 4181 4.5p2 m m<sup>19</sup> 4.4.1.g The CONTACT-INFO clause shall include the working group\u2019s website URL 4181 4.5p2 r o 4.4.1.h The DESCRIPTION shall contain a high-level textual description of the MIB module 2578 5.3p1 m m 4.4.1.i The REVISION clause shall be present for each standardized revision of the module 4181 4.5p2 m m 4.4.1.j The time of the most recent REVISION clause shall match the value of the LAST-UPDATED clause 4181 4.5p2 m m 4.4.1.k The DESCRIPTION clause associated with each REVISION clause shall indicate the version of the standard in which it is defined 4181 4.5p2 m m 4.4.1.l The DESCRIPTION clause associated with each REVISION clause shall provide a list of all significant changes 4181 4.5p2 r m 4.4.1.m The value assigned to the MODULE-IDENTITY descriptor shall be unique for the standardized module 4181 4.5p2 m m 4.4.1.n The MODULE-IDENTITY macro shall be updated for each revision 2578 10p2 m m"},{"location":"rules-for-module-development/#rules-for-the-object-identity-macro","title":"Rules for the OBJECT-IDENTITY macro","text":"<p>The OBJECT-IDENTITY macro is the preferred method to declare a node on the international object identifier tree for administrative use. For example, the NEMA \"devices\" node is defined in NTCIP 8004 v03 using an OBJECT-IDENTITY macro. Requirements for the completion of the MODULE-IDENTITY macro within an NTCIP MIB module are as shown in Table 8.</p> <p>Rules for the OBJECT-IDENTITY macro</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.2.a All administrative OIDs below the nema devices node shall be defined via the OBJECT-IDENTITY macro 4181 6p1 r m 4.4.2.b All normative text about an object identity shall be included within its DESCRIPTION clause 2578 7.5p1 m m"},{"location":"rules-for-module-development/#rules-for-the-object-type-macro","title":"Rules for the OBJECT-TYPE Macro","text":""},{"location":"rules-for-module-development/#general-rules-for-the-object-type-macro","title":"General Rules for the OBJECT-TYPE Macro","text":"<p>The OBJECT-TYPE macro is used to specify the object types contained in a MIB module. There are several groups of requirements related to the OBJECT-TYPE macro. General requirements for the OBJECT-TYPE macro are provided in Table 9.</p> <p>General Rules for the OBJECT-TYPE Macro</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.1.a Each unit of management information shall be specified using an instance of the OBJECT-TYPE macro 2578 7p1 m m 4.4.3.1.b The value assigned in the STATUS clause shall not be updated to restore an items status (e.g., do not change \u201cdeprecated\u201d to \u201ccurrent\u201d) 2578 10.2p1 r r 4.4.3.1.c All normative text about an object type shall be included within its DESCRIPTION clause (but this may include references to other text) 2578 7.5p1 m m 4.4.3.1.d The DESCRIPTION clause of each read-write and read-create object type shall define its behavior in response to an agent reboot 4181 4.6.2p3 r m[1] 4.4.3.1.e Clarifications and additional explanations shall be added to the DESCRIPTION clause as needed 2578 10.2p1 o o 4.4.3.1.f The length of any binary string appearing within a DEFVAL clause shall be divisible by 8 2578 7.9p7 m m 4.4.3.1.g The length of any hexadecimal string appearing within a DEFVAL clause shall be divisible by 2 2578 7.9p7 m m 4.4.3.1.h Any character string appearing within a DEFVAL clause shall not include any tab or line terminator characters 2578 7.9p7 m m 4.4.3.1.i A DEFVAL clause shall be revised as needed 2578 10.2p1 o[2] d 4.4.3.1.j The object identifier assigned to an invocation of the OBJECT-TYPE macro shall not end with a sub-identifier of zero 4181 4.6.5p1 m m 4.4.3.1.k The object identifier assigned to an invocation of the OBJECT-TYPE macro shall be unique 4181 4.6.5p1 m m"},{"location":"rules-for-module-development/#rules-for-leaf-object-types","title":"Rules for Leaf Object Types","text":"<p>Leaf object types are the only object types that have instances that can be accessed via SNMP. Leaf object types include both scalar objects (i.e., with only one instance) and columnar objects (i.e., where there is one instance per conceptual row of a table). Table 10 provides additional requirements for the specification of leaf object types.</p> <p>Rules for Leaf Object Types</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.2.a The value of the SYNTAX clause shall be a base type, a BITS construct, or a textual convention 2578 7.1p1 c c 4.4.3.2.b When a standard textual convention provides the desired semantics, it shall be used in the SYNTAX clause for a new object type 4181 4.6.1.4p2 r m 4.4.3.2.c When a standard textual convention provides the desired semantics and uses a consistent syntax, it shall be used to replace the SYNTAX clause in a revised object type 4181 4.6.1.4p2 r m 4.4.3.2.d Object types with Boolean values shall be assigned the SYNTAX of the TruthValue textual convention 4181 4.6.1.9p2 r r[1] 4.4.3.2.e Constraints shall be added to the SYNTAX of an object type when the restrictions are implicit in the original definition but not defined 4181 4.9p3 o m 4.4.3.2.f The SYNTAX of OBJECT IDENTIFIER shall be used when the set of identification values need to be independently extensible without a centralized registry 4181 4.6.1.5p2 r m[2] 4.4.3.2.g The \u201cOpaque\u201d SYNTAX defined in SMIv1 shall not be used 2578 7.1.9p4 m<sup>27</sup> m<sup>27</sup> 4.4.3.2.h The SYNTAX of IpAddress shall not be used[3] 4181 4.6.1.7p1 m[4] m<sup>27</sup> 4.4.3.2.i The UNITS clause shall be present for object types with syntaxes that express values in units (e.g., time, distance, weight, volume) 2578 72p1 o r 4.4.3.2.j When possible, the text string for the UNITS clause shall conform to\u00a0the International System of Units (SI) as defined by the International Bureau of Weights and Measures (BIPM) r 4.4.3.2.k The text string of the UNITS clause shall\u00a0indicate the decimal position (e.g., \u201chundredths of seconds\u201d, \u201ccentiseconds\u201d) m 4.4.3.2.l The IndexPart of the OBJECT-TYPE macro shall not be included 2578 7.7p1 m m 4.4.3.2.m No nodes shall be defined underneath an OBJECT IDENTIFIER that is associated with a leaf object type. 2578 7.10p2 m m"},{"location":"rules-for-module-development/#rules-for-table-object-types","title":"Rules for Table Object Types","text":"<p>Table object types represent conceptual tables, which is the mechanism defined by SNMP to support multiple instances of management information. They are referred to as \"conceptual\" since an instance of the object type is not directly accessible; SNMP only allows access to cells within the table. Table 11 provides additional requirements for the specification of object types that represent a conceptual table.</p> <p>Rules for Table Object Types</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.3.a The descriptor for a conceptual table object type shall end with the term \"Table\" 4181 Cp1 r m 4.4.3.3.b The SYNTAX shall be \u201cSEQUENCE OF \u201d[1] 2578 7.1.12p1 m m 4.4.3.3.c The MAX-ACCESS clause shall be \u201cnot-accessible\u201d 2578 7.1.12p2 m m 4.4.3.3.d The DESCRIPTION clause shall define the purpose of the table and summarize its contents - m 4.4.3.3.e Static tables shall be associated with a scalar object type that indicates the number of rows in the table m 4.4.3.3.f An object type that indicates the number of rows in a table shall have a SYNTAX with a lower limit equal to or greater than one (1)[2] r 4.4.3.3.g The IndexPart of the OBJECT-TYPE macro shall not be included 2578 7.7p1 m m 4.4.3.3.h The OBJECT IDENTIFIER associated with a table object type shall have exactly one sub-node 2578 7.10p2 m m 4.4.3.3.i The sub-node to the table shall have a sub-identifier of 1 2578 7.10p2 m m 4.4.3.3.j The sub-node to the table shall be the row object type that defines a conceptual row within the table 2578 7.10p2 m m"},{"location":"rules-for-module-development/#rules-for-row-object-types","title":"Rules for Row Object Types","text":"<p>Within SNMP, each conceptual table type has exactly one conceptual row type. Similar to the conceptual table, SNMP does not allow direct access to an instance of a row, which is why it is referred to as \"conceptual\". Row object types identify the columns contained within each conceptual row instance of the table and provides information about managing the information within a row. Table 12 provides additional requirements for the specification of object types that represent a conceptual row within a table.</p> <p>Rules for Row Object Types</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.4.a The descriptor for a conceptural row object type shall be the descriptor for the conceptual table object type with the suffix \"Table\" replaced with the suffix \"Entry\" 4181 Cp1 r m 4.4.3.4.b The SYNTAX shall be \u201c\u201dError! Bookmark not defined. 2578 7.1.12p1 m m 4.4.3.4.c The descriptor used for \"\" shall be identical to the descriptor for the conceptual row, except the first letter will be in upper case 4181 Cp1 r m 4.4.3.4.d A revision shall add columns to the \u201c\u201d as needed - o[1] 4.4.3.4.e The MAX-ACCESS clause shall be \u201cnot-accessible\u201d 2578 7.1.12p2 m m 4.4.3.4.f The DESCRIPTION clause shall explain how any INDEX objects that are not from the table are used to uniquely identify instances of objects 2578 7.7p8 m m 4.4.3.4.g The IndexPart of the OBJECT-TYPE macro shall be included 2578 7.7p1 m m 4.4.3.4.h The IndexPart shall use the AUGMENTS clause if the table has a one-to-one correspondence to the conceptual rows of an existing table[2] 2578 7.8.1p1 m m 4.4.3.4.i The IndexPart shall use the INDEX clause if the table does not have a one-to-one correspondence to the conceptual rows of an existing table 2578 7.8.1p1 m m 4.4.3.4.j The INDEX clause of a conceptual row that extends another table with a row relationship that is not one-to-one[3]\u00a0shall use an INDEX clause where the initial indices are the indices of the parent table listed in the same order. 4181 4.6.4p1 r m 4.4.3.4.k The INDEX clause shall specify object types that allow unambiguous identification of a conceptual row 2578 7.7p2 m m 4.4.3.4.l The INDEX clause shall not reference scalar objects 2578 7.7p2 m m 4.4.3.4.m The INDEX clause shall not reference the same object type more than once 2578 7.7p2 r m 4.4.3.4.n If the INDEX clause references an object type that is external to the table, the Entry shall identify which rows will exist within the local table 4181 4.6.4p1 m m 4.4.3.4.o The INDEX clause shall not reference object types that have a SYNTAX of Counter32 or Counter64 2578 7.7p5 m m 4.4.3.4.p The INDEX clause shall not reference an object type that allows the value zero 4181 4.6.1.1p3 r r 4.4.3.4.q The INDEX clause shall not reference an object type that allows negative values 4181 4.6.1.1p3 m m 4.4.3.4.r The IMPLIED keyword shall not be used with an object type having a fixed length 2578 7.7p4 m m 4.4.3.4.s The IMPLIED keyword shall not be used with any object type other than the last object type listed in the INDEX clause 2578 7.7p4 m m 4.4.3.4.t The IMPLIED keyword shall not be used with an object type of variable length string that might have zero-length 2578 7.7p4 m m 4.4.3.4.u The IMPLIED keyword shall not be used within an INDEX clause for a conceptual row that might be expanded (i.e., extended with additional index columns) 4181 4.6.4p1 r m 4.4.3.4.v The MAX-ACCESS clause of each object type listed in the INDEX clause of its same table shall be \u201cnot-accessible\u201d 2578 7.7p7 m[4] m<sup>4</sup> 4.4.3.4.w The SYNTAX and number of object types listed in the INDEX clause shall be designed to ensure that the OBJECT IDENIFIERs of columnar object instances do not exceed 128 sub-identifiers 4181 4.6.6p2 r m 4.4.3.4.x Each subordinate columnar object shall be assigned an OBJECT IDENTIFIER that is a direct sub-identifier of the conceptual row. 2578 7.10p2 m m 4.4.3.4.y Each subordinate columnar object shall be assigned a descriptor that starts with the conceptual row descriptor minus the \"Entry\" suffix 4181 Cp1 r m"},{"location":"rules-for-module-development/#rules-for-tables-that-support-creationdeletion-of-rows","title":"Rules for Tables that Support Creation/Deletion of Rows","text":"<p>Some conceptual tables allow for row creation and deletion through SNMP operations or internally by the agent. These operations require proper management to ensure that the data within them do not produce logical inconsistencies. Table 13 provides requirements specific to conceptual tables that allow for row creation or deletion internally or by an SNMP operation (i.e., dynamic and managed tables). Table 14 provides requirements specific to conceptual tables that allow for row creation or deletion by an SNMP operation.</p> <p>Rules for Tables that Support Creation/Deletion of Rows</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.5.a The DESCRIPTION clause of the conceptual row shall define any conditions under which an agent can independently create/delete rows 4181 4.6.4p1 m m 4.4.3.5.b The DESRCIPTION clause of the conceptual row shall define what happens to dynamically created rows upon reboot 4181 4.6.4p1 o.1 o.1 <p>Table 14: Rules for Tables that Support Creation/Deletion of Rows</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.3.5.a The conceptual row shall contain a columnar object type with the SYNTAX of StorageType 4181 4.6.4p1 o.1 o.1 4.4.3.5.b The StorageType object type, if present, shall have a MAX-ACCESS of read-create 4181 4.6.4p1 m m 4.4.3.5.c The DESCRIPTION clause of the StorageType object type, if present, shall specify which columns within a permanent row can be modified 4181 4.6.4p1 m m 4.4.3.5.d The conceptual row shall contain a columnar object type with the SYNTAX of RowStatus 2578 7.1.12.1p1 m m 4.4.3.5.e The RowStatus object type shall have a MAX-ACCESS of read-create 2578 7.1.12.1p1 m m 4.4.3.5.f No object type contained within the conceptual row shall have a MAX-ACCESS of \u201cread-write\u201d[1] 2578 7.3p4 m m 4.4.3.5.g The DESCRIPTION clause of the RowStatus object type shall specify the columnar objects that must be set with valid values before row activation 4181 4.6.4p1 m m 4.4.3.5.h The DESCRIPTION clause of the RowStatus object type shall specify whether it is possible to modify other columns when the RowStatus is active 4181 4.6.4p1 m m"},{"location":"rules-for-module-development/#rule-for-the-syntax-specification-of-the-object-type-macro","title":"Rule for the Syntax Specification of the OBJECT-TYPE Macro","text":""},{"location":"rules-for-module-development/#general-rules-for-syntax-specification","title":"General Rules for SYNTAX Specification","text":"<p>Table 15 provides requirements for the specification of the SYNTAX clause for leaf object types.</p> <p>General Rules for SYNTAX Specification</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.1.a An object type that is represented as an integer-valued enumeration shall have a SYNTAX of \u201cINTEGER\u201d with a NamedNumberList 4181 4.6.1.1p1 m m 4.4.4.1.b An object with a SYNTAX of an enumerated INTEGER that might conceivably be extended shall assign value 1 to 'other' to allow manufacturer-specific objects to extend the range[1] r 4.4.4.1.c Except for enumerations, the keyword \"INTEGER\" shall not be used 4181 4.6.1.1p3 r m[2] 4.4.4.1.d An object type that is represented as an integer, needs to support negative values, and can be represented within the range of a signed 32-bit integer shall have a SYNTAX based on Integer32 4181 4.6.1.1p3 r m 4.4.4.1.e An object type whose actual value 1) can increase above the maximum reported value or decrease below the minimum reported value, 2) does not latch at the extreme value when the value normalizes, and 3) should be represented within the range of an unsigned 32-bit integer shall have a SYNTAX based on Gauge32 4181 4.6.1.1p3 r m 4.4.4.1.f An object type whose actual value 1) can increase above the maximum value or decrease below the minimum value, 2) does not latch at the extreme value when the value normalizes, and 3) should be represented within the range of an unsigned 64-bit integer shall have a SYNTAX based on CounterBasedGauge64 4181 4.6.1.3p2 d[3] d 4.4.4.1.g An object type that is represented as an integer that is intended to monotonically increase until a maximum value and then wrap shall have a SYNTAX based on an accepted counter type (See Section\u00a04.4.4.3) 2578 7.1.6p1 m m 4.4.4.1.h An object type that represents a duration between two epochs and measured in hundredths of a second shall have a SYNTAX based on TimeTicks 2578 7.1.8p1 r m 4.4.4.1.i An object type that is represented as an integer; does not have the semantics of a counter, gauge, or TimeTicks; and can be represented within the range of an unsigned, 32-bit integer shall have a SYNTAX based on Unsigned32 4181 4.6.1.1p3 r r[4] 4.4.4.1.j An object type that is represented as an integer; does not have the semantics of a counter, gauge, or TimeTicks; and supports values greater than 2^31-1 shall have a SYNTAX based on Unsigned32 4181 4.6.1.1p3 m m 4.4.4.1.k An object type with a syntax dealing with time shall use a textual convention defined in ISO 20684-1 (e.g., ITSDailyTimeStamp) - r 4.4.4.1.l An object type that represents an object identifier shall have a SYNTAX based on OBJECT IDENTIFIER[5] 2578 3.6p1 r m 4.4.4.1.m An object type that represents a series of named items where each item can have a Boolean representation shall have a SYNTAX based on the BITS construct 2578 7.1.4p1 r r[6] 4.4.4.1.n Any generic network/transport address shall be represented as a pair of object types using 1) a TransportDomain or TransportAddressType and 2) a TransportAddress from RFC 3419 m 4.4.4.1.o An IP-specific network address shall be represented with the InetAddressType and InetAddress pair from RFC 4001 4181 4.6.1.7p1 r r 4.4.4.1.p All other object types shall have a SYNTAX based on OCTET STRING 2578 7.1.2p1 r r 4.4.4.1.q Object types shall not have a SYNTAX of DisplayString unless its values are intended to be explicitly limited to NVT ASCII 4181 Bp3 m m 4.4.4.1.r The SYNTAX shall be constrained using range or SIZE constraints as appropriate[7] 4181 4.6.1.4p1 r m 4.4.4.1.s If the SYNTAX value references a textual convention, a (potentially additional) constraint shall be allowed to further reflect the appropriate value 2578 11.2p1 m m 4.4.4.1.t The constraints on the SYNTAX of a standardized object type shall not be revised if such a revision changes the meaning or validity of any value[8] m 4.4.4.1.u All values that are outside the standardized named bits and enumerations are reserved by the standard[9] m 4.4.4.1.v If the SYNTAX of a standardized object type is revised (which is only allowed in a backwards compatible manner per other rules), an explanation shall be added to the \u201c\u201d subclause of the object type m 4.4.4.1.w If the SYNTAX of a standardized object type is revised and the object type is writeable or is used as an index to a table that supports creation and/or deletion of rows, the module\u2019s compliance statement shall indicate the values that must be supported 4181 4.6.1.10p3 m m"},{"location":"rules-for-module-development/#rules-for-enumerations","title":"Rules for Enumerations","text":"<p>Table 16 provides additional requirements for the specification of leaf object types that are based on an INTEGER with a NamedNumberList.</p> <p>Rules for Enumerations</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.2.a The NamedNumberList shall specify all allowed values[1] 2578 7.1.1p2 m m 4.4.4.2.b The NamedNumberList shall start with the enumeration value of 1 2578 7.1.1p2 r r 4.4.4.2.c The NamedNumberList shall use contiguously assigned values 2578 7.1.1p2 r r 4.4.4.2.d The identifier of a named number shall not exceed 64 characters in length 2578 7.1.1p3 m m 4.4.4.2.e The identifier of a named number shall not exceed 32 characters in length 2578 7.1.1p3 o[2] o 4.4.4.2.f New enumerations shall be added during a revision 2578 10.2p1 o o 4.4.4.2.g An identifier for a standardized named number shall not be changed 2578 10.2p1 m r[3] 4.4.4.2.h A standardized named number shall be marked via a comment as \u201cdeprecated\u201d or \u201cobsolete\u201d, as appropriate. - - - o 4.4.4.2.i The DEFVAL clause, if present, shall use the identifier of the named number rather than the equivalent integer 4181 4.6.1.1p3 r m"},{"location":"rules-for-module-development/#rule-for-counters","title":"Rule for Counters","text":"<p>Table 17 provides additional requirements for the specification of leaf object types that are based on a counter.</p> <p>Rules for Counters</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.3.a The valuereference assigned to the counter object type shall denote plurality 2578 3.1p5 m m 4.4.4.3.b If the information is ever likely to wrap in less than an hour, the SYNTAX shall be based on a 64-bit counter syntax 2578 7.1.10p4 r r 4.4.4.3.c Counters that satisfy the semantics of Counter32/Counter64 as defined in RFC 2578 Clause 7.1.6 (e.g., have no defined initial value and have no requirements to reset) shall have a SYNTAX of Counter32 or Counter64, as appropriate 4181 4.6.1.2p1 r m 4.4.4.3.d Counters that satisfy the semantics of ZeroBasedCounter32/ ZeroBasedCounter64 (e.g., initialize at zero and have no requirements to reset) shall have a SYNTAX of ZeroBasedCounter32 or ZeroBasedCounter64, as appropriate 4181 4.6.1.2p1 r m 4.4.4.3.e Counters that satisfy the semantics of ITSCounter32 (e.g., initialize at zero and can be reset) shall have a SYNTAX of ITSCounter32 r 4.4.4.3.f Counters that do not satisfy the semantics of the other counter types shall use another textual convention that explicitly defines the intended semantics.[1] 4181 4.6.1.3p2 m m 4.4.4.3.g The MAX-ACCESS clause shall have a value of \u201cread-only\u201d or \u201caccessible-for-notify\u201d 2578 7.1.6p3 m m 4.4.4.3.h For Counter32 and Counter64 object types, the DESCRIPTION clause shall not define an initial value 2578 7.1.6p2 m m 4.4.4.3.i For Counter32, Counter64, ZeroBasedCounter32, and ZeroBasedCounter64 object types, the DESCRIPTION clause shall not require the counter to reset in response to any event 4181 4.6.1.2p1 m m 4.4.4.3.j The DESCRIPTION clause shall identify any events that might cause the counter to have a discontinuity and how these events can be detected 4181 4.6.1.2p1 m m 4.4.4.3.k If discontinuities can occur at any time other than re-initialization of the device, the MIB module shall define a discontinuity object type that provides a reference as to when the last discontinuity occurred 2578 7.1.6p2 r m 4.4.4.3.l The object type shall not have a DEFVAL clause 2578 7.9p8 m m"},{"location":"rules-for-module-development/#rule-for-timeticks","title":"Rule for TimeTicks","text":"<p>Table 18 provides additional requirements for the specification of leaf object types that are based on the TimeTicks syntax.</p> <p>Rules for TimeTicks</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.4.a The DESCRIPTION clause shall define the two reference epochs for an object type with a SYNTAX of TimeTicks 2578 7.1.8p1 m m"},{"location":"rules-for-module-development/#rule-for-oids","title":"Rule for OIDs","text":"<p>Table 19 provides additional requirements for the specification of leaf object types that are based on the OBJECT IDENTIFIER syntax.</p> <p>Rules for OIDs</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.5.a OBJECT IDENTIFIER values shall be designed to limit their structure to 128 sub-identifiers 2578 7.1.3p1 m m 4.4.4.5.b OBJECT IDENTIFIER values shall be designed to limit each sub-identifier value to less than 2^32 2578 7.1.3p1 m m 4.4.4.5.c The SYNTAX of an object type that is intended to refer to an object instance shall use the VariablePointer textual convention defined in RFC 2579 4181 4.6.1.5 r m 4.4.4.5.d The SYNTAX of an object type that is intended to refer to a row within a conceptual table shall use the RowPointer textual convention defined in RFC 2579 4181 4.6.1.5 r m 4.4.4.5.e The SYNTAX of an object type that is intended to refer to any other entity registered on the international object identifier tree shall use the AutonomousType textual convention defined in RFC 2579 - - - - 4.4.4.5.f An object type that is designed to reference and access a value stored in another object instance shall be associated with security credentials that are to be used when accessing that data. - - - m 4.4.4.5.g The DEFVAL clause shall use a single X.208 ASN.1 identifier 2578 7.9p4 m m"},{"location":"rules-for-module-development/#rule-for-bits","title":"Rule for BITS","text":"<p>Table 20 provides additional requirements for the specification of leaf object types that are based on the BITS construct.</p> <p>Rules for BITS</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.6.a A SYNTAX based on the BITS construct shall specify all allowed values[1] 2578 7.1.4p1 m m 4.4.4.6.b The named bits in the BITS construct shall start at 0 4181 4.6.1.6p1 m m 4.4.4.6.c The named bits shall be assigned to contiguous bit positions 2578 7.1.4p2 r[2] r<sup>49</sup> 4.4.4.6.d The identifier of a named bit shall not exceed 64 characters in length 2578 7.1.4p4 m m 4.4.4.6.e The identifier of a named bit shall not exceed 32 characters in length 2578 7.1.4p4 o[3] o 4.4.4.6.f New bit assignments shall be added to existing BITS constructs during a revision 2578 7.1.4p2 o o 4.4.4.6.g Existing bit assignments shall be aged as appropriate during a revision (e.g., denoted with a \"-- deprecated\" statement) o 4.4.4.6.h An identifier for a standardized named bit shall not be changed 2578 7.1.4p2 m m"},{"location":"rules-for-module-development/#rule-for-block-objects","title":"Rule for Block Objects","text":"<p>Table 21 provides additional requirements for the specification of leaf object types that are based on the OCTET STRING syntax.</p> <p>Rules for Block Objects</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.7.a The descriptor for a block object shall have a suffix of \"Block\" m 4.4.4.7.b Block object types shall have a SYNTAX of ITSOerString as defined by ISO 20684-1 r[1] 4.4.4.7.c Block object types shall define the structure of their embedded data using the format defined in Clause\u00a04.5.4.2 - r 4.4.4.7.d Values of block object instances shall be encoded using the Octet Encoding Rules (OER) as defined in ITU-T X.696 (ISO/IEC 8825-7) - r 4.4.4.7.e The MAX-ACCESS of a block object type shall not be greater than the MAX-ACCESS of any object type referenced by the block object type data structure[2] - m"},{"location":"rules-for-module-development/#rule-for-octet-strings","title":"Rule for Octet Strings","text":"<p>Table 22 provides additional requirements for the specification of leaf object types that are based on the OCTET STRING syntax.</p> <p>Rules for Octet Strings</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.4.8.a SIZE constraints shall be defined for OCTET STRINGS if they are more limited than the maximum of 0..65535 4181 4.6.1.4p1 r m 4.4.4.8.b OCTET STRINGs shall be constrained to 255 octets 2578 7.1.2p1 o o 4.4.4.8.c The size of any OCTET STRING used as an index shall be size constrained to facilitate object instance identification 4181 4.6.1.4p1 r m"},{"location":"rules-for-module-development/#rule-for-the-description-clause-of-the-object-type-macro","title":"Rule for the DESCRIPTION Clause of the OBJECT-TYPE Macro","text":"<p>The DESCRIPTION clause consists of a text string intended to define the object type. NTCIP extends this definition by defining a series of subclauses to be embedded within this text string with precise rules for each subfield as defined in Table 23.</p> <p>Rules for the DESCRIPTION Clause</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.5.a The DESCRIPTION clause shall be divided into the following subclauses, each with their own label as indicated:<code>&lt;Definition&gt;</code><code>&lt;Format&gt;</code><code>&lt;Superseded by&gt;</code><code>&lt;Informative&gt;</code><code>&lt;Object Identifier&gt;</code> m 4.4.5.b The <code>&lt;Definition&gt;</code> subclause shall be present for all object types. m 4.4.5.c The <code>&lt;Definition&gt;</code> subclause shall contain the normative definition of the object type m 4.4.5.d The <code>&lt;Definition&gt;</code> subclause shall not be revised, once standardized, except to fix typos r 4.4.5.e The <code>&lt;Format&gt;</code> subclause shall be used to define additional semantics for specific values in object types (e.g., a special meaning of the value 0)[1] o 4.4.5.f The <code>&lt;Format&gt;</code> subclause shall be present for leaf object types that use a bitmaps or enumerations for the representation of data m 4.4.5.g For bitmapped formats, the <code>&lt;Format&gt;</code> subclause shall normatively define the format per Clause\u00a04.5.3 m 4.4.5.h The <code>&lt;Format&gt;</code> subclause shall not be revised, once standardized, except to fix typos or to change the layout of the information r 4.4.5.i The <code>&lt;Superseded by&gt;</code> subclause shall be present for any object type that has a STATUS of deprecated or obsolete o 4.4.5.j The <code>&lt;Superseded by&gt;</code> subclause\u00a0shall contain a reference to one or more object types that are intended to replace the functionality of the containing object type or shall indicate that the object was not replaced m 4.4.5.k The <code>&lt;Superseded by&gt;</code> subclause shall not be revised once standardized[2] r 4.4.5.l The <code>&lt;Informative&gt;</code> subclause shall be present for all object types o 4.4.5.m The <code>&lt;Informative&gt;</code> subclause shall contain any informative information about the object type that the authors might deem to be useful for implementors and other users m 4.4.5.n The <code>&lt;Informative&gt;</code> subclause shall be revised as appropriate to provide further clarification of the meaning of the object type o 4.4.5.o If the <code>STATUS</code> of the object type is aged (e.g., deprecated or made obsolete), the  subclause shall explain why it was aged[3] m 4.4.5.p If the object type is a replacement for a deprecated object type, the <code>&lt;Informative&gt;</code> subclause shall identify the deprecated object type and explain how the issue was addressed r 4.4.5.q The <code>&lt;Object Identifier&gt;</code> subclause shall be present for all object types m 4.4.5.r The <code>&lt;Object Identifier&gt;</code> subclause shall provide an informative, human-readable version of the full object identifier in integer dot notation from the root node m 4.4.5.s The <code>&lt;Object Identifier&gt;</code> subclause shall not be revised, once standardized, except to fix typos m"},{"location":"rules-for-module-development/#mapping-of-the-notification-type-macro","title":"Mapping of the NOTIFICATION-TYPE macro","text":"<p>Object types are typically exchanged via get and set operations that are initiated by a manager; however, SNMP also allows for the definition of notification types, which are notices initiated by a device and sent to a manager. Notification types can be sent in either an unacknowledged mode (called a \"trap\") or in an acknowledged mode (called an \"inform\"); both mechanisms rely upon the NOTIFICATION-TYPE macro to define the content and meaning of each notification type.<sup>47</sup></p> <p>Mapping of the NOTIFICATION-TYPE macro</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.6.a Each notification type shall be specified using an instance of the NOTIFICATION-TYPE macro 2578 8p1 m m 4.4.6.b The OBJECTS clause shall not include any object types that have a MAX-ACCESS clause value of \u201cnot-accessible\u201d 2578 8.1p1 m m 4.4.6.c The value assigned in the STATUS clause shall not be updated to restore an items status (e.g., do not change \u201cdeprecated\u201d to \u201ccurrent\u201d) 2578 10.3p1b r r 4.4.6.d All normative text about a notification type shall be included within its DESCRIPTION clause (but this may include references to other text) 2578 8.3p1 m m 4.4.6.e The DESCRIPTION clause shall specify the meaning conveyed by each occurrence of each object type in the OBJECTS clause 2578 8.1p1 m m 4.4.6.f The DESCRIPTION clause shall specify which instance should be included for each occurrence of each object type in the OBJECTS clause 2578 8.1p1 m m 4.4.6.g The DESCRIPTION clause shall specify or otherwise reference the throttling technique to be used for the notification[1] 4181 4.7p3 m m 4.4.6.h Clarifications and additional explanations shall be added to the DESCRIPTION clause as needed 2578 10.3p1c o o 4.4.6.i The next-to-last sub-identifier of the OID for any newly defined notification type shall have a value of zero 2578 8.5p1 m m 4.4.6.j An OBJECT IDENTIFIER that is assigned to notification type shall not have any sub-identifiers defined. 4181 4.6.5p2 r m"},{"location":"rules-for-module-development/#mapping-of-the-textual-convention-macro","title":"Mapping of the Textual Convention Macro","text":"<p>Section 3 and 4 of RFC 2579 defines requirements related developing a new textual convention macro,</p> <p>Mapping the Textual Convention macro</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.7.a Textual conventions shall be defined for any SYNTAX that is used repeatedly with similar semantics m 4.4.7.b Textual conventions shall be defined for any SYNTAX that would benefit from being associated with a DISPLAY-HINT m 4.4.7.c The descriptor for the textual convention shall not conflict with reserved words 2579 3p2 m m 4.4.7.d The descriptor shall not be in all upper case 2579 3p2 m m 4.4.7.e The descriptor shall start with \"Ntcip\" to ensure uniqueness from any existing or future textual conventions from RFCs or other sources m 4.4.7.f The DISPLAY-HINT clause shall not be defined for any textual convention with a SYNTAX clause value of OBJECT IDENIFIER, IpAddress, Counter32, Counter64, or any enumerated integer or BITS construct syntax 2579 3.1p1 m m 4.4.7.g The DISPLAY-HINT clause shall be defined for all other values of the SYNTAX clause 4181 4.6.3p2 r r 4.4.7.h The value assigned in the STATUS clause shall not be updated to restore an item's status (e.g., do not change \u201cdeprecated\u201d to \u201ccurrent\u201d) 2579 5p2 o o 4.4.7.i The SYNTAX clause of a textual convention shall not refer to another textual convention 2579 3.5p1 m m 4.4.7.j The SYNTAX clause of a textual convention shall be constrained (i.e., sub-typed) 2579 4p1 o o 4.4.7.k ASN.1 type assignments (e.g., <code>&lt;MyType&gt;::=&lt;Type&gt;</code>) shall not be used[1] 2579 5p2 m m"},{"location":"rules-for-module-development/#mapping-of-the-object-group-macro","title":"Mapping of the OBJECT-GROUP macro","text":"<p>Section 3 of RFC 2580 defines requirements related to the OBJECT-GROUP macro.</p> <p>OBJECT-GROUP mapping</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.8.a The descriptor for an OBJECT-GROUP shall include a revision number (\"R#\") r 4.4.8.b The OBJECTS clause shall not contain object types from other modules 2580 3.1p1a m m 4.4.8.c The OBJECTS clause shall not contain object types with MAX-ACCESS of \u201cnot-accessible\u201d 2580 3.1p1b m m 4.4.8.d A MIB module shall not define any accessible object types that are not referenced by the OBJECTS clause of at least one object group 2580 3.1p2 m m 4.4.8.e A revision to a standardized OBJECT-GROUP macro shall not add or delete an object from the OBJECTS clause 4181 4.9p6a m m 4.4.8.f The value assigned in the STATUS clause shall not be updated to restore an items status (e.g., do not change \u201cdeprecated\u201d to \u201ccurrent\u201d) 2580 7.1p2a o o 4.4.8.g The STATUS clause of the OBJECT-GROUP shall change when the status of a referenced object type changes 2580 7.1p2f o[1] o 4.4.8.h The DESCRIPTION clause shall identify the standard and version where the group was originally defined[2] r"},{"location":"rules-for-module-development/#mapping-of-the-notification-group-macro","title":"Mapping of the NOTIFICATION-GROUP macro","text":"<p>Section 3 of RFC 2580 defines requirements related to the NOTIFICATION -GROUP macro.</p> <p>NOTIFICATION-GROUP mapping</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.9.a The NOTIFICATIONS clause shall not contain notification types from other modules 2580 4.1p1 m m 4.4.9.b A MIB module shall not define notification types that are not referenced by the NOTIFICATIONS clause of at least one notification group 2580 4.1p2 m m 4.4.9.c A revision to a standardized NOTIFICATION-GROUP macro shall not add or delete a NOTIFICATION from the NOTIFICATIONS clause 4181 4.9p6a x x 4.4.9.d The value assigned in the STATUS clause shall not be updated to restore an items status (e.g., do not change \u201cdeprecated\u201d to \u201ccurrent\u201d) 2580 7.2p2a o o 4.4.9.e The STATUS clause of the NOTIFICATION-GROUP shall change when the status of a referenced notification type changes 2580 7.2p2f o o"},{"location":"rules-for-module-development/#mapping-of-the-module-compliance-macro","title":"Mapping of the MODULE-COMPLIANCE macro","text":"<p>Section 3 of RFC 2580 defines requirements related to the MODULE-COMPLIANCE macro. Until a practical benefit can be demonstrated in using such statements, the NTCIP community has decided to document conformance with PRLs, RTMs, MIB compliance tables, and supported range tables. PRLs and RTMs are defined in NTCIP 8002; MIB compliance tables are intended to document how the objects within a MIB have evolved over time; supported range tables are intended to precisely define the minimum required ranges for each object for each version of the standard in a relatively concise manner. The MIB compliance and supported range tables should be presented as defined in this clause.</p>"},{"location":"rules-for-module-development/#mib-compliance-table","title":"MIB Compliance Table","text":"<p>The top row of the MIB Compliance Table shall provide the column names. The first column shall be labeled \\\"Group\\\" and subsequent columns shall indicate a compliance identifier, which is typically the version number of the standard (e.g., \\\"v03\\\")<sup>52</sup>. The first column of second row of the table shall contain the label \\\"Status\\\"; subsequent columns of the second row show indicate the status of each version of the MIB as follows:</p> <ol> <li> <p>\\\"c\\\" indicates current</p> </li> <li> <p>\\\"d\\\" indicates deprecated</p> </li> <li> <p>\\\"o\\\" indicates obsolete</p> </li> </ol> <p>Typically, only the latest version would be shown as current, but a standard could use multiple current columns to define different profiles (e.g., NTCIP 1203 could define a vXX profile for CMS and a vXX profile VMS, both of which are current simultaneously). Columns should only be shown as obsolete once all implementations are believed to be removed from service.</p> <p>Subsequent rows of the table shall list each object and notification group defined by the MIB, with the descriptor of the group provided in the left-hand column of the table. The subsequent columns shall show the conformance status of the group as defined for the indicated version of the standard; conformance shall be shown using the conformance symbols as defined for use within PRLs. Finally, any cell within the table can be associated with a note via a reference symbol (e.g., \\\"[1]\\\"). The text of the notes shall appear immediately after the table.</p> <p>Values within a column shall not be changed, except to correct typos or to change the status of the MIB version (i.e., as recorded in row 2). MIB versions that were previously documented as obsolete in a previous version of the standard can be omitted from the table. Each version of the standard should add at least one new column.</p> <p>Table 28 provides an example of a MIB compliance table.</p> <p>Table 28: Example MIB Compliance Table (based on a draft of NTCIP 1203)</p> Group v01 v02 v03 v04-VMS v04-CMS Version Status o d d c c dmsTypeGroupR1 M M M M M dmsTechnologyGroupR1 O.1(2) M M M M dmsDisplayCapabilitiesGroupR1 O.1(2) Capabilities:M Capabilities:M Capabilities:M Capabilities:M dmsVmsCapabilitiesGroupR1 VMS:M VMS:M M dmsFontGroupR1 O.2 Fonts:M Fonts:M Fonts:M Fonts:M dmsFontGroupR1Ext Fonts:M Fonts:M Fonts:M Fonts:M"},{"location":"rules-for-module-development/#supported-range-table","title":"Supported Range Table","text":"<p>MIB modules define the standardized allowed syntax for each object type; however, there are cases where the intent is to allow implementations to subrange the standardized syntax. Within prior versions of NTCIP (i.e., those based on SMIv1), the default policy was that implementations were allowed to subrange any object unless otherwise indicated. In general, the NTCIP standards were rather lax in stating these exceptions. Within SMIv2 (and specifically RFC 2580), the default is that implementations are required to support the full standardized range unless otherwise indicated.</p> <p>To conform to the SMIv2 format, all NTCIP standards should include a supported range table to indicate the intent of supported ranges so that implementations (especially manger implementations) can manage expectations of what values might be supported. Specifically, these tables shall identify the minimum requirements for claiming support for an object and shall describe any conditional support rules.</p> <p>The supported range table shall indicate the following columns in the header row:</p> <ol> <li> <p>An \\\"Obj\\\" column that lists the descriptor of each object type in     the MIB module for which implementations are not required to support     the full range of values.</p> </li> <li> <p>A \\\"Versions\\\" column that identifies the compliance statements to     which the refinement applies (this is typically just a version     number but could include a version number coupled with a profile     name).</p> </li> <li> <p>A \\\"Refinement\\\" column that identifies the allowed variations in     the object type that implementations are allowed to impose.</p> </li> </ol> <p>The first row of the table shall list the column headings. Subsequent rows are presented in groups, with each group consisting of one row that displays the object descriptor across an entire row of the table followed by one or more rows where each subsequent row list one or more versions and the refinement specification that applies to the object type for the indicated versions. The refinement specification shall be documented according to the Object construct defined within the MODULE-COMPLIANCE macro in Section 2 of RFC 2580, but omitting the \\'\\\"OBJECT\\\" value(ObjectName)\\' portion.</p> <p>Table 29 provides an example of an object refinement table.</p> <p>Table 29: Example Object Refinement Table</p> Obj Versions Refinement dmsMessageMemoryType v01 <code>SYNTAX INTEGER {&lt;br&gt;\u00a0\u00a0\u00a0\u00a0\u00a0currentBuffer (5) }</code>DESCRIPTION \"The value of 'other' is reserved for manufacturer specific use and is not expected to be widely used. Implementations shall support at least one of 'permanent', 'changeable', or 'volatile' in addition to 'currentBuffer'. Support for 'schedule' is conditional based on support for dmsActionTableGroupR1. The enumeration of 'blank' was not defined in v01.\" v02, v03 <code>SYNTAX INTEGER {&lt;br&gt;\u00a0\u00a0\u00a0\u00a0\u00a0currentBuffer (5) }</code>DESCRIPTION \"The value of 'other' is reserved for manufacturer specific use and is not expected to be widely used. Implementations shall support at least one of 'permanent', 'changeable', or 'volatile' in addition to 'currentBuffer' and 'blank'. Support for 'schedule' is conditional based on support for dmsActionTableGroupR1.\" v04-VMS <code>SYNTAX INTEGER {&lt;br&gt;\u00a0\u00a0\u00a0\u00a0\u00a0currentBuffer (5) }</code>DESCRIPTION \"The value of 'other' is reserved for manufacturer specific use and is not expected to be widely used. Implementations shall support at least one of 'changeable' or 'volatile' in addition to 'currentBuffer' and 'blank'. Implementations may support 'permanent'. Support for 'schedule' is conditional based on support for dmsActionTableGroupR1.\" v04-CMS <code>SYNTAX INTEGER {&lt;br&gt;\u00a0\u00a0\u00a0\u00a0\u00a0permanent (2),&lt;br&gt;\u00a0\u00a0\u00a0\u00a0\u00a0currentBuffer (5) }</code>DESCRIPTION \"The value of 'other' is reserved for manufacturer specific use and is not expected to be widely used. Implementations shall support 'permanent', 'currentBuffer', and 'blank'. Implementations shall not support 'changeable' or 'volatile'. Support for 'schedule' is conditional based on support for dmsActionTableGroupR1.\" dmsMessageNumber v01 DESCRIPTION \"Range is limited based on memory type as follows:\u00a0\u00a0\u00a0permanent:\u00a0\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0changeable:\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0volatile:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0currentBuffer: (1)\u00a0\u00a0schedule:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1)\" v02,v03, v04-VMS, v04-CMS DESCRIPTION \"Range is limited based on memory type as follows:\u00a0\u00a0\u00a0permanent:\u00a0\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0changeable:\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0volatile:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0per PICS\u00a0\u00a0currentBuffer: (1)\u00a0\u00a0schedule:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1)\u00a0\u00a0blank:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1..255) \" dmsMessageOwner v01,v02, v03 DESCRIPTION \"Implementations shall support only NVT-ASCII characters.\" v04-VMS, v04-CMS DESCRIPTION \"Implementations shall support all NVT-ASCII characters and any other UTF-8 characters identified in the PICS\""},{"location":"rules-for-module-development/#summary","title":"Summary","text":"<p>The format of the MIB Compliance and Supported Range Tables are designed to facilitate the production of corresponding MODULE-COMPLIANCE statements if necessary, in the future. However, the tabular structure is intended to facilitate identifying changes that have occurred over time in a more concise manner and to reduce redundancy within the text.</p> <p>Table 30 defines additional rules for populating the MIB compliance and object refinement tables.</p> <p>MIB Compliance Table Rules</p> Item Requirement RFC Clause RFC Status NTCIP Status 4.4.10.a Each version of a MIB shall be associated with a MIB compliance statement 2580 5p2 m m 4.4.10.b The MIB compliance statement shall identify each required and optional object group and notification group for the indicated version 4181 4.8p2a r m 4.4.10.c The MIB compliance statement shall specify any allowed implementation variances (e.g., in access permissions or in supported object ranges) 4181 4.8p2b m m 4.4.10.d The groups listed in the MIB compliance statement shall include any and all required object groups and/or types from external MIBs, prefixed with their module descriptor 4181 4.8p5a 4.8p5b r m 4.4.9.f When a writeable enumerated integer or a BITS construct that is referenced by the compliance statement has enumerations or named bits added, a note that specifies support for the original set of values shall be added to all previous versions of the respective object group(s) (if not already present) 4181 4.9p7 r m 4.4.10.e The information contained within the MIB compliance statement shall be consistent with the information provided within the respective PRL(s). - m"},{"location":"rules-for-module-development/#additional-ntcip-requirements","title":"Additional NTCIP Requirements","text":""},{"location":"rules-for-module-development/#required-implementation-notes","title":"Required Implementation Notes","text":"<p>Every NTCIP standard containing a MIB module shall contain the following normative text prior to its MIB compliance table.</p> <p>The MIB compliance and object refinement tables may partially duplicate and extend requirements contained within the PRL and RTM. In case of any conflict between these sources, the PRL and RTM take precedence over the MIB compliance and object refinement tables.</p> <p>To claim support for any object type, implementations shall:</p> <ul> <li> <p>support the defined MAX-ACCESS and SYNTAX of the object type, unless   the object refinement table defines a refinement for the object type   for the relevant compliance statement;</p> </li> <li></li> <li> <p>when the MIB object refinement table defines a refinement for an   object type for the relevant compliance statement, support at least   the minimum access and values specified.</p> </li> <li></li> </ul>"},{"location":"rules-for-module-development/#ntcip-defined-table-types","title":"NTCIP-Defined Table Types","text":"<p>NTCIP defines three types of conceptual table types: static, dynamic, and managed.</p> <p>The number of conceptual rows contained within a static conceptual table shall not change during run time, irrespective of whether they have been initialized or not. As a result, an SNMP manager can successfully query any supported object from any supported conceptual row at any time but should be prepared to receive a data that is not initialized.</p> <p>The number of conceptual rows contained within a dynamic conceptual table can change during run time, but only through processes internal to the SNMP agent (e.g., an agent creating a new log entry) that the manager does not directly control.</p> <p>The number of conceptual rows contained within a managed conceptual table can change during run time due to SNMP management operations (and optionally due to internal operations).</p> <p>In the case of dynamic and managed tables, an SNMP manager should be prepared to receive an error response if an object instance is requested before its creation or after its deletion.</p>"},{"location":"rules-for-module-development/#bitmap-format","title":"Bitmap Format","text":"<p>The content of the format subclause is delimited by \"\\&lt;Format&gt;\" and shall be defined according to the following:</p> <p>a)  The format clause shall identify the meaning of each bit by its bit     number. Bit numbering shall start with zero (0). This may be done in     textual form (e.g., \"each bit shall represent a sequential sensor     number with sensor 1 mapped to Bit 0\") or may use a format such as:</p> <p>Bit Name Description</p> <p>\\&lt;x&gt; \\&lt;bitName&gt; = \\&lt;description&gt;</p> <p>...</p> <p>1 \\&lt;bitName&gt; = \\&lt;description&gt;</p> <p>0 \\&lt;bitName&gt; = \\&lt;description&gt; (Least Significant Bit of the Least Significant Byte)</p> <p>b)  If the SYNTAX is based on a \"BITS\" construct, which is required for     all new bitmapped objects, bit numbers are serialized according to     the rules defined by RFC 3416 where Bit 0 is the \"first bit\". This     means that Bit 0 is the high-order bit of the first octet in the     serialization.</p> <p>c)  If the SYNTAX is based on an integer type (e.g., Integer32), which     is only allowed for object types converted from SMIv1, Bit 0 shall     represent the low-order bit. This means that Bit 0 is the low-order     bit of the last octet in the serialization.</p> <p>d)  If the SYNTAX is based on one of the NTCIP octet-string-based bitmap     textual conventions (e.g., NtcipOctetBitmap8, NtcipOctetBitmap16),     which are only allowed for object types converted from SMIv1, Bit 0     shall be mapped to the lowest order bit of the final octet. This     means that Bit 0 is the low-order bit of the last octet in the     serialization.</p> <p>e)  If the SYNTAX is based on an OCTET STRING, which is only allowed for     object types converted from SMIv1, the mapping of bit numbers to the     bits within the serialization shall be defined within the \\&lt;Format&gt;     subclause of the DESCRIPTION clause of the object type.</p> <p>Figure 5 depicts the impact of the above rules for an example object type with 14 bits defined (resulting in two bits of padding that might not be explicitly defined). Although new objects using bitmaps should use the BITS construct standardized by RFC 2578, older objects converted from SMIv1 might still use one of the other constructs.</p> <p>Bit Ordering of a 14-Bit Value<sup>55</sup></p> BITS Syntax Bit # Encoding Bit # Octet Order INTEGER Syntax Bit # Encoding Bit # Octet Order BITMAP16 Syntax Bit # Encoding Bit # Octet Order OCTET STRING Syntax Bit # Encoding Bit # Octet Order"},{"location":"rules-for-module-development/#itsoerstring-specifications","title":"ITSOerString Specifications","text":""},{"location":"rules-for-module-development/#itsoerstring-syntax","title":"ITSOerString Syntax","text":"<p>The \\\"ITSOerString\\\" textual convention is defined in ISO 20684-1 as an unconstrained OCTET STRING representing value of an X.680 ASN.1 structure encoded using OER. Within SNMP, the size of an OCTET STRING is limited to 65535 octets. An object type that uses the ITSOerString should further constrain this size as tightly as appropriate for its intended use.</p> <p>Within NTCIP, the definition of the X.680 ASN.1 structure shall be defined or referenced by the \\&lt;Definition&gt; subclause of the OBJECT-TYPE macro according to the rules in Clause 4.5.4.2.</p>"},{"location":"rules-for-module-development/#itsoerstring-format","title":"ITSOerString Format","text":"<p>An object with a SYNTAX based on the ITSOerString or similar textual convention shall define the data structure to be encoded using any valid X.680 ASN.1 type; however, the following is substituted for the definition of NamedType to add mechanisms to reference other objects contained in the MIB:</p> <p>NamedType ::=</p> <p>identifier Type</p> <p>| valuereference &amp; \\\".\\\" &amp; IndexSuffixes ExternalReference</p> <p>| \\\"*\\\" &amp; valuereference &amp; \\\".\\\" &amp; IndexSuffixes ExternalReference</p> <p>IndexSuffixes ::=</p> <p>IndexSuffix</p> <p>| IndexSuffixes &amp; \\\".\\\" &amp; IndexSuffix</p> <p>IndexSuffix ::= number | DefinedValue | \\\"(\\\" ValueRange \\\")\\\" | \\\"*\\\"</p> <p>ExternalReference ::=</p> <p>\\\"-- @\\\" modulereference</p> <p>| empty</p> <p>where,</p> <p>a) valuereference is a descriptor assigned to an invocation of an     OBJECT-TYPE macro.</p> <p>b) IndexSuffixes is a list of the associated indexes as required to     explicitly identify the exact instance(s) of a given object-type.     Each index may be identified as either a specific value or a     variable; if a variable is used, the variable shall be defined     within the same module. The IndexSuffixes for a leaf object shall     always be \"0\".</p> <p>c) A non-empty ExternalReference shall be present at the end of every     line containing a valuereference, if the valuereference is defined     in a different module</p> <p>d) modulereference, when present, indicates the MIB module where the     object type referenced by valuereference is defined</p> <p>The first valuereference option supports the definition of block object types. For example, within a SEQUENCE, instead of providing an \"identifier Type\" pair, the specification can indicate the name of an object instance that should exist within the agent. The object instance is identified using the descriptor for the defined OBJECT-TYPE along with the appropriate index value(s). The \"Type\" to be associated with the NamedType shall be the SYNTAX value assigned in the OBJECT-TYPE macro for the associated valuereference. If an error occurs in trying to produce such an encoding, the entire ITSOerString shall produce a zero-length string.</p> <p>EXAMPLE SEQUENCE { dmsSignAccess.0 -- \\@NTCIP1203-Dms</p> <p>dmsMessageMultiString.3.2 -- \\@NTCIP1203-Dms</p> <p>}</p> <p>This would provide a structure containing the scalar value of dmsSignAccess and the dmsMessageMultiString for the second changeable message.</p> <p>The second valuereference option supports the definition of configurable object types and entails an additional level of dereferencing. For example, within a SEQUENCE, instead of providing an \"identifier Type\" pair, the specification can indicate the name of an object instance (called the pointer object instance) that should exist within the agent and that is designed to reference an object instance (called the data object instance). The pointer object instance is identified using the descriptor for the defined pointer OBJECT-TYPE along with the appropriate index value(s). However, the actual data being encoded is the value pointed to by the pointer object instance, which is the value of the data object instance. As such, when encoding and decoding, the type to be used shall be derived from the SYNTAX assigned in the OBJECT-TYPE macro for the associated data object instance. If an error occurs in trying to produce such an encoding, the entire ITSOerString shall produce a zero-length string.</p> <p>EXAMPLE SEQUENCE { *fdObjectGroupFieldObject.x.y.* }</p> <p>This would provide a structure containing the ordered list of objects referenced by all fdObjectGroupFieldObjects with an initial index of x and a secondary index of y. For example, if fdObjectGroupFieldObject.x.y.1 referenced dmsMessageMultiString.3.2 and fdObjectGroupFieldObject.x.y.2 referenced dmsMessageRunTimePriority.3.2 with no other entries for fdObjectGroupFieldObject.x.y, the structure would equate to</p> <p>SEQUENCE { dmsMessageMultiString.3.2 -- \\@NTCIP1203-Dms</p> <p>dmsMessageRunTimePriority.3.2 -- \\@NTCIP1203-Dms</p> <p>}</p> <p>The \\\"ValueRange\\\" notation of IndexSuffix shall be interpreted as a shorthand notation for listing every instance identified within the ValueRange. The \\\"*\\\" notation of IndexSuffix shall be interpreted as a shorthand notation for listing every instance contained in the device in the same order as would appear in a walk of the MIB.</p> <p>EXAMPLE For example, consider a device that has the following information in a conceptual table:</p> indexA indexB sampleObject 1 1 A 1 2 B 2 1 C 3 1 D 3 2 E The field: <p>sampleObject.(1..2).*</p> <p>would evaluate to</p> <p>sampleObject.1.1,</p> <p>sampleObject.1.2,</p> <p>sampleObject.2.1</p> <p>Annex C provides several examples.</p>"},{"location":"rules-for-module-development/#object-identifier-layout","title":"Object Identifier Layout","text":"<p>All items that NTCIP registers on the international object identifier tree shall be registered under the nema node at { iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) nema(1206) }.</p> <p>NTCIP standards may reference and require support for objects located elsewhere on the international object identifier tree.</p> <p>The NTCIP Coordinator shall ensure the assignment of a unique node(s) to each standard that requires a X.208 module. This assignment(s) shall be documented within an X.208 module contained within the standard. Such assignments are typically used as the name of the MODULE-IDENTITY invocation within the module.</p> <p>NOTE---Secondary assignments might be used for administrative or other objects that need to exist in other portions of the international object identifier tree.</p>"},{"location":"rules-for-module-development/#nodes-under-the-module-identity","title":"Nodes under the MODULE-IDENTITY","text":"<p>Exceptions to these rules can be allowed with the approval of the Joint Committee on the NTCIP.</p>"},{"location":"rules-for-module-development/#notification-types","title":"Notification Types","text":"<p>The sub-identifier zero (0) under the MODULE-IDENTITY node shall be assigned or reserved for a descriptor identical to that of the MODULE-IDENTITY with the suffix \\\"Notifications\\\" added. Any notification types defined in the module shall be defined directly under this node. This ensures that each notification type is assigned a name with the next-to-last sub-identifier equal to zero (0), which is required by Clause 4.7 of RFC 4181.</p> <p>Example --- ntcipSmiNotifications would have the RELATIVE-OID of { transportation(4) protocols(1) ntcipSmi(5) 0 }<sup>56</sup></p>"},{"location":"rules-for-module-development/#conformance","title":"Conformance","text":"<p>The sub-identifier 127 under the MODULE-IDENTITY node shall be assigned or reserved for a descriptor identical to that of the MODULE-IDENTITY with the suffix \\\"Conformance\\\" added.</p> <p>NOTE---RFC 4181 recommends placing all object types under sub-identifier one (1) and placing conformance under sub-identifier two (2). NTCIP standards place object types directly below the MODULE-IDENTITY node and shifts the conformance node to sub-identifier 127 to allow sequential numbering of object types.</p> <p>Example --- ntcipSmiConformance would have the RELATIVE-OID of { transportation(4) protocols(1) ntcipSmi(5) 127 }<sup>57</sup></p> <p>Sub-identifier one (1) under the conformance node shall be reserved for a compliance node with the descriptor of the MODULE-IDENTITY with the suffix \\\"Compliances\\\". As of 2023, NTCIP does not define MODULE-COMPLIANCE statements, but this node is reserved for this purpose if the policy changes.</p> <p>Example --- ntcipSmiCompliances would have the RELATIVE-OID of { transportation(4) protocols(1) ntcipSmi(5) ntcipSmiConformance(127) 1 }</p> <p>Sub-identifier two (2) under the conformance node shall be assigned to or reserved for a group node with the descriptor of the MODULE-IDENTITY with the suffix \\\"Groups\\\".</p> <p>Example --- ntcipSmiGroups would have the RELATIVE-OID of { transportation(4) protocols(1) ntcipSmi(5) ntcipSmiConformance(127) 2 }</p> <p>OBJECT-GROUP and NOTIFICATION-GROUP macros included in the MIB module shall be assigned a sub-identifier under the group node. The descriptor for the group shall include the descriptor of the MODULE-IDENTITY, descriptive terms as needed, and a suffix of \\\"GroupR#[Ext#]\\\", where \\\"[Ext#]\\\" is an optional extension number used to extend a previously defined group and each \\\"#\\\" represents a sequential number of the revision or extension. The \\\"R#\\\" should indicate the sequential position of the REVISION as recorded in the MODULE-IDENTITY\\'s revision history, or the DESCRIPTION clauses within the revision history should indicate how the \\\"R#\\\"s relate to the revisions.</p> <p>Example --- dbMgmtV2GroupR1 is assigned to the RELATIVE-OID of { transportation(4) devices(2) global(6) globalV2(9) dbMgmtV2(1) dbMgmtV2Conformance(127) dbMgmtV2Groups(2) 1 }</p>"},{"location":"rules-for-module-development/#object-types","title":"Object Types","text":"<p>OBJECT-TYPE macros included in the MIB module shall be assigned a sub-identifier under the standard node, perhaps with intermediate nodes to further group object types.</p> <p>Example --- dbMgmtV2Mode has the RELATIVE-OID of { transportation(4) devices(2) global(6) globalV2(9) dbMgmtV2(1) 1 }</p>"},{"location":"rules-for-module-development/#mib-design-considerations","title":"MIB Design Considerations","text":""},{"location":"rules-for-module-development/#maintain-secure-data","title":"Maintain Secure Data","text":"<p>Access to data defined within the device needs to be controlled under all scenarios without any possibility of enabling any indirect access by unauthorized users. For example, a configurable event log might monitor data within the device to create a log entry to capture data when a defined event occurs. If a user is able to configure an event to monitor or record data that the user is not authorized to access, a security vulnerability exists.</p> <p>The designer of the MIB module shall ensure that every object that points to another object within the device is unambiguously associated with appropriate security credentials that are to be used when accessing that data.</p>"},{"location":"rules-for-module-development/#reuse-existing-structures","title":"Reuse Existing Structures","text":"<p>Developers of NTCIP MIB modules should be familiar existing MIBs published by</p> <ul> <li> <p>IETF (i.e., as RFCs), especially</p> </li> <li> <p>RFC 2981, event MIB;</p> </li> <li> <p>RFC 2982, expression MIB; and</p> </li> <li> <p>RFC 3014, notification MIB;</p> </li> <li> <p>RFC 3231, scheduling MIB;</p> </li> <li> <p>RFC 3433, entity sensor MIB;</p> </li> <li> <p>RFC 3877, alarm MIB;</p> </li> <li> <p>RFC 4268, entity state MIB;</p> </li> <li> <p>RFC 6933, entity MIB;</p> </li> <li> <p>ISO (especially the ISO 20684 series)</p> </li> <li> <p>NTCIP</p> </li> </ul> <p>Many times, structures that developers wish to create already have existing MIBs that:</p> <ul> <li> <p>Can be used directly</p> </li> <li> <p>Can be used with minor changes</p> </li> <li> <p>Can be used as a basis of a new design, or</p> </li> <li> <p>Simply provide insights into issues that should be considered during a   new design</p> </li> </ul> <p>In particular, developers should be aware of the general-purpose input/output capability defined in ISO 20684-2 and how it can be easily extended to support a standardized interface with virtually any generic sensor or actuator.</p>"},{"location":"rules-for-module-development/#use-of-table-indexes","title":"Use of Table Indexes","text":"<p>This document does not preclude the potential for two or more management applications from simultaneously accessing the same object. However, designers of MIB modules should consider such situations and use designs to minimize conflicts and maximize security. In particular, designers should consider adding an initial owner index to tables when there is a need to prevent different managers from accessing each other's data or configuration. This will allow administrators to configure access to rows within the table by simply specifying the owner identifiers to which they should have access.</p> <p>Developers should consider using the ISO 20684-7 fdOwnerTable for this purpose. Developers should also be cautious in defining overall management features for the table that might allow users with restricted access to monitor activities by other users. This can be achieved by placing monitoring objects into a table that augments the fdOwnerTable so that each owner can monitor statistics related to their own rows in the table but not universal statistics. Universal statistics, if defined, should be placed in a separate area of the international object identifier tree so that administrators can easily control access.</p>"},{"location":"rules-for-module-development/#consistency-with-the-prl-and-rtm","title":"Consistency with the PRL and RTM","text":"<p>The module compliance statement, as defined by the module compliance table and object refinement table shall be consistent with the Protocol Requirements List (PRL) and Requirements Traceability Matrix (RTM).</p>"},{"location":"rules-for-module-development/#multi-version-interoperability-mvi-backward-compatibility","title":"Multi-Version Interoperability (MVI, Backward Compatibility)","text":"<p>With the development and publication of newer versions of various NTCIP standards, the need to address and ensure multi-version interoperability (MVI, often referred to as \"backward compatibility\" with a previous version, or interoperability to a defined extent with future versions). To promote MVI, t he standard shall ensure that standards provide adequate documentation that defines what features are supported by each version.</p>"},{"location":"rules-for-module-development/#row-status-in-static-tables","title":"Row Status in Static Tables","text":"<p>The MIB module for NTCIP 8004 defines the deprecated NtcipRowStatusStatic textual convention; the UML state transition diagrams for this textual convention are provided in Figure 6, Figure 7, and Figure 8.</p> <pre><code>  stateDiagram-v2\n    invalid --&gt; invalid: set(row data)[error]&lt;br&gt;set(status=activate) / badValue&lt;br&gt;set(status=deactivate)/badValue\n    invalid --&gt; standby: set(row data&gt;) [no error]\n    invalid --&gt; other: set(proprietary rowStatus object = nonstandard value)\n    available\n    note right of available: There is no path to transition directly between invalid and available, unless the table-specific reset command provides for this.\n    note: A device reset shall force the values of all columns to the default value and shall force a transition to the default state. The default value and default state shall be defined by any table using a RowStatus column.</code></pre> Figure 6: Row Status Static\u2014Invalid <pre><code>  stateDiagram-v2\n    standby --&gt; standby: set(row data)[no error]&lt;br&gt;set(status=deactivate)\n    standby --&gt; invalid: set(row data) [error]\n    standby --&gt; available: set(status=activate)\n    standby --&gt; other: set(proprietary rowStatus object = nonstandard value)\n    note: A device reset shall force the values of all columns to the default value and shall force a transition to the default state. The default value and default state shall be defined by any table using a RowStatus column.</code></pre> Figure 7: Row Status Static\u2014Standby <pre><code>  stateDiagram-v2\n    available --&gt; available: set(row data)[no error]&lt;br&gt;set(status=activate)\n    available --&gt; invalid: set(row data) [error]\n    available --&gt; standby: set(status=deactivate)\n    available --&gt; other: set(proprietary rowStatus object = nonstandard value)\n    note: A device reset shall force the values of all columns to the default value and shall force a transition to the default state. The default value and default state shall be defined by any table using a RowStatus column.</code></pre> Figure 8: Row Status Static\u2014Available <ol> <li> <p>The same requirement sometimes appears multiple times within and across RFCs. This document eliminates this redundancy and only provides a single sample reference to each requirement.\u00a0\u21a9</p> </li> <li> <p>Within this context, a module using the same MODULE-IDENTITY represents a new revision of the module. A module that uses a different MODULE-IDENTITY is considered as different module. If a module is intended to be a replacement of all objects of an existing module, it should use a new MODULE-IDENTITY.\u00a0\u21a9</p> </li> <li> <p>Required sections for NTCIP data dictionary standards are defined in NTCIP 8002.\u00a0\u21a9</p> </li> <li> <p>Within NTCIP, waivers shall require approval of the Joint Committee on the NTCIP\u00a0\u21a9</p> </li> <li> <p>RFC 2580 requires standardized modules to either include a MODULE-COMPLIANCE macro or to be paired with a companion module that provides this definition\u00a0\u21a9</p> </li> <li> <p>NTCIP standards are allowed to document module compliance with a MODULE-COMPLIANCE macro (either in the same MIB or a different MIB) or through the use of module compliance and supported range tables as defined in X.X.X\u00a0\u21a9</p> </li> <li> <p>Moving an invocation can cause problems in other modules using the IMPORT statement; however, this requirement does not apply to upgrading modules from SMIv1 to SMIv2 because the module names change.\u00a0\u21a9</p> </li> <li> <p>RFC 2578 recommends against exceeding 32 characters, but RFC 4181 explicitly revises the statement to allow longer names when necessary to support unique, mnemonic names.\u00a0\u21a9</p> </li> <li> <p>Private MIBs are encouraged to prefix descriptors with the appropriate enterprise name\u00a0\u21a9</p> </li> <li> <p>The requirement is intended to only apply to RFC documents, this profile expands its application to NTCIP documents\u00a0\u21a9</p> </li> <li> <p>This suffix is optional for Version 1 descriptors\u00a0\u21a9</p> </li> <li> <p>For NTCIP, the contact details shall reflect where user comments are to be sent, as defined in foreword of the document.\u00a0\u21a9</p> </li> <li> <p>Alternatively, the information can be provided in another normative section of the MIB module, such as the DESCRIPTION clause of a table or of the MODULE-IDENTITY macro.\u00a0\u21a9</p> </li> <li> <p>RFC 2578 indicates that the DEFVAL \"may be used\" and that it is a \"hint\" to implementors. As such, it is informative and can be changed without deprecating an object. Within NTCIP, the DEFVAL clause is recommended within NTCIP and changes to its value should be avoided.\u00a0\u21a9</p> </li> <li> <p>Other formats should only be used for backwards compatibility \u21a9</p> </li> <li> <p>Or use the ITSRelativeOid textual convention\u00a0\u21a9</p> </li> <li> <p>Use a pair of objects based on either 1) InetAddressType and InetAddress or 2) a) either TransportDomain or TransportAddressType and b) TransportAddress\u00a0\u21a9</p> </li> <li> <p>Except when converting from SMIv1\u00a0\u21a9</p> </li> <li> <p>\"\\&lt;EntryType&gt;\" represents an ASN.1 SEQUENCE without the DEFAULT, OPTIONAL, or COMPONENTS OF keywords\u00a0\u21a9</p> </li> <li> <p>As such, if an implementation does not support any rows, it would not support the object that indicates the number of rows\u00a0\u21a9</p> </li> <li> <p>Unless explicitly prohibited within the \\&lt;Definition&gt; of the conceptual row object type \u21a9</p> </li> <li> <p>It is preferred to revise the definition of the existing table if it is managed by the same authority\u00a0\u21a9</p> </li> <li> <p>Example 1: Table B only has rows for some of the rows in Table A. Example 2: Table B has multiple rows for each row in Table A\u00a0\u21a9</p> </li> <li> <p>Except when importing from SMIv1\u00a0\u21a9</p> </li> <li> <p>Use \"read-create\" instead\u00a0\u21a9</p> </li> <li> <p>See Clause 5.3 for an example.\u00a0\u21a9</p> </li> <li> <p>Within SNMP, an \\\"INTEGER\\\" is identical to an \\\"Integer32\\\"; omitting the \\\"32\\\" has caused confusion in the past.\u00a0\u21a9</p> </li> <li> <p>The CounterBasedGauge64 breaks some defined semantics of the base type, but is the best current solution for a 64-bit gauge and is generally accepted by the SNMP community\u00a0\u21a9</p> </li> <li> <p>May use Integer32 to support backward compatibility \u21a9</p> </li> <li> <p>\\\"Based on\\\" allows for the use of textual conventions that use the OBJECT IDENTiFIER type as its base.\u00a0\u21a9</p> </li> <li> <p>Integer and the various NTCIP \\\"bitmap\\\" types shall only be used for backwards compatibility \u21a9</p> </li> <li> <p>Within SNMP, an OCTET STRING is not allowed to exceed 65535 octets; this constraint should be added to any OCTET STRING that is currently unconstrained\u00a0\u21a9</p> </li> <li> <p>For example, the range of counters and gauges cannot be changed as doing so would change the meaning of the maximum and minimum values; however, an object can be deprecated and replaced\u00a0\u21a9</p> </li> <li> <p>Implementations are not allowed to extend meaning. For example, if an implementation wishes to logically create new enumerated values, it cannot add enumerations to the standard object type as doing so might conflict with future versions of the standard. Instead, it could create a manufacturer-specific object type and transition the standard object type to a neutral value (e.g., \"other\")\u00a0\u21a9</p> </li> <li> <p>Values not listed are reserved for future standardization and constitute a protocol error if used\u00a0\u21a9</p> </li> <li> <p>RFC 2578 recommends against exceeding 32 characters, but RFC 4181 explicitly revises the statement to allow longer names when necessary to support unique, mnemonic names.\u00a0\u21a9</p> </li> <li> <p>Changes should only be made when there is significant need as these names often are used within code and changes can create maintenance headaches\u00a0\u21a9</p> </li> <li> <p>This might require defining a local textual convention\u00a0\u21a9</p> </li> <li> <p>Values not listed are reserved for future standardization and constitute a protocol error if used\u00a0\u21a9</p> </li> <li> <p>When adding named bits to an existing BITS construct, bit positions can be skipped to facilitate identification of different versions of the object type by forcing new bits into a new octet.\u00a0\u21a9</p> </li> <li> <p>RFC 2578 recommends against exceeding 32 characters, but RFC 4181 explicitly revises the statement to allow longer names when necessary to support unique, mnemonic names.\u00a0\u21a9</p> </li> <li> <p>Except for existing block objects that cannot be converted into a structure that uses OER \u21a9</p> </li> <li> <p>It is the responsibility of the agency deploying an SNMP agent that users are not granted greater access for block objects than they are for the objects contained within the block object.\u00a0\u21a9</p> </li> <li> <p>For example, a ranged integer might indicate that the maximum value has a special meaning.\u00a0\u21a9</p> </li> <li> <p>The clause should always point to the next sequential replacement; if that object has been deprecated, it will reference its replacement.\u00a0\u21a9</p> </li> <li> <p>For example, the functionality is no longer relevant or the design was flawed/ambiguous and has been replaced with a new object type\u00a0\u21a9</p> </li> <li> <p>NTCIP defines additional rules for the use of notifications as defined in NTCIP 2301.\u00a0\u21a9</p> </li> <li> <p>Throttling is important in a number of scenarios, including: the same notification occurring in rapid succession, different notifications occurring in rapid succession, notifications buffering when the device is offline and flooding the network when connected, and limited buffering when offline and having a large number of devices flood the network when connectivity is restored (e.g., after a power outage). The throttling design should protect against all of these. ISO 20684-4 proposes a solution for this that should be considered.\u00a0\u21a9</p> </li> <li> <p>They should be replaced with textual conventions\u00a0\u21a9</p> </li> <li> <p>Because this is optional, an object group can remain \\\"current\\\", even if one of the contained object types are \\\"deprecated\\\". See RFC 4181 Clause 4.9 for more details.\u00a0\u21a9</p> </li> <li> <p>This allows a reader to quickly identify when features were added\u00a0\u21a9</p> </li> <li> <p>It is expected that the version\u00a0\u21a9</p> </li> <li> <p>Implemented as a MODULE-COMPLIANCE macro.\u00a0\u21a9</p> </li> <li> <p>Implemented as a module compliance table and object refinement table\u00a0\u21a9</p> </li> <li> <p>Encodings that resolve to an OCTET STRING identify a leading and trailing octet, which are then sent to lower layers one octet at a time; integers are encoded as a single unit and lower protocol layers define the ordering of octets\u00a0\u21a9</p> </li> <li> <p>NTCIP 8004 currently does not define any notifications and therefore currently does not define a notifications node; however, node zero is reserved for this purpose.\u00a0\u21a9</p> </li> <li> <p>NTCIP 8004 currently does not have a conformance statement because currently it only defines textual conventions and object identities; however, node 127 is reserved for this purpose.\u00a0\u21a9</p> </li> </ol>"},{"location":"smi/","title":"A NTCIP SMI","text":""},{"location":"smi/#ntcip-structure-of-management-information-smi-normative","title":"NTCIP Structure of Management Information (SMI) [Normative]","text":"<p>Annex A defines the overall structure of the NTCIP-defined management information and several textual conventions that are believed to be useful for a broad range of applications. The text provided in Annex A.1 constitutes the standard NTCIP8004-NemaV1 MIB. Annex A.2 (except the headings) constitutes the standard NTCIP8004-TransportationV1 MIB.</p>"},{"location":"smi/#nema-module","title":"NEMA Module","text":"<pre><code>NTCIP8004-NEMA DEFINITIONS ::= BEGIN\n\nIMPORTS\n  MODULE-IDENTITY, OBJECT-IDENTITY, enterprises\n                                                 FROM SNMPv2-SMI;\n                                                   -- RFC 2578\n\nnema MODULE-IDENTITY\n  LAST-UPDATED \"202212120500Z\"\n  ORGANIZATION \"NTCIP BSP2 WG\"\n  CONTACT-INFO\n    \"name:    NTCIP Coordinator\n     email:   ntcip@nema.org\n     postal:  National Electrical Manufacturers Association\n              1300 North 17th Street, Suite 1752\n              Rosslyn, VA 22209-3801\n              USA\"\n  DESCRIPTION \n    \"IANA delegated sub-identifier 1206 under the enterprise node to NEMA\n     This MIB defines the overall structure of management information \n     that is believed to be useful for a broad range of applications.\"\n  REVISION     \"202212120500Z\"\n  DESCRIPTION  \n    \"Updated to SMIv2. Divided module into a separate NEMA managed parent \n     module and an NTCIP managed module. \"\n  REVISION     \"200507190500Z\"\n  DESCRIPTION  \"MIB moved into NTCIP 8004 with updated module name.\"\n  REVISION     \"200112010500Z\"\n  DESCRIPTION  \"NEMA TS 3.2 republished as NTCIP 1101 v01.\"\n  REVISION     \"199610010500Z\"\n  DESCRIPTION  \"NEMA TS 3.2 approved.\"\n  ::= { enterprises 1206 }\n\nnemaMgmt                OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"The mgmt subtree is used for standard NEMA object definitions \n    that span different NEMA sections.\"\n  ::=  { nema 1 }\n\nnemaExperimental        OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"The experimental subtree is used to identify object types used \n    only on an experimental basis. Changing OBJECT IDENTIFIERs once assigned     \n    is challenging due to an installed base. Thus, this node should only be \n    used for experiments, such as research efforts that are strictly limited \n    to be short-term projects to investigate and test ideas. More permanent \n    node assignments should be obtained prior to any longer-term or larger-\n    scale deployment to prevent complications if, and when, the solution \n    becomes more widely adopted.\"\n  ::=  { nema 2 }\n\nexpGlobal OBJECT-IDENTITY \n  STATUS  deprecated\n  DESCRIPTION\n    \"&lt;Definition&gt; A node that contains the experimental auxiliary \n     input/output objects.\n     &lt;Object Identifier&gt; 1.3.6.1.4.1.1206.2.2\"\n::= {nemaExperimental 2} \n\nnemaPrivate             OBJECT-IDENTITY\n  STATUS      current\n    DESCRIPTION\n\"The private subtree is used to identify object types defined unilaterally. NEMA assigns nodes to enterprises for purposes such as defining enterprise-specific MIB modules. A request for a node assignment can be sent to the NTCIP Coordinator at ntcip@nema.org. When a sub-node is assigned, the responsibility for managing that sub-node is transferred to the enterprise making the request.\n\n   Upon receiving a node, the enterprise may, for example, define new MIB modules and object types under this node. In addition, it is strongly recommended that the enterprise also register its transportation devices under this subtree, to provide an unambiguous identification mechanism for use in management protocols. For example, if the 'ABC, Inc.' enterprise produced transportation devices, then it could request a node under the nemaPrivate node from NEMA. Such a node might be numbered: 1.3.6.1.4.1.1206.3.99\n\n   The 'ABC, Inc.' enterprise might then register their 'Widget Controller' under the name of 1.3.6.1.4.1.1206.3.99.1, ensuring a unique identification. Thereafter, each enterprise is responsible for ensuring unique identification of information objects within their subtree. NEMA delegates the role of assigning numbers under each nemaPrivate node to those to which they are assigned, except of course for the initial enterprise number.\"\n  ::= { nema 3 }\n\nEND -- NTCIP8004-NEMA\n</code></pre>"},{"location":"smi/#transportation-module","title":"Transportation Module","text":"<pre><code>NTCIP8004-Transportation DEFINITIONS ::= BEGIN\n\nIMPORTS\n  MODULE-IDENTITY, OBJECT-IDENTITY, Integer32\n                                                 FROM SNMPv2-SMI\n                                                   -- RFC 2578\n  TEXTUAL-CONVENTION\n                                                 FROM SNMPv2-TC\n                                                   -- RFC 2579\n  nema\n                                                 FROM NTCIP8004-NEMA;\n\ntransportation MODULE-IDENTITY\n  LAST-UPDATED \"202212120500Z\"\n  ORGANIZATION \"NTCIP BSP2 WG\"\n  CONTACT-INFO\n    \"name:    NTCIP Coordinator\n     email:   ntcip@nema.org\n     postal:  National Electrical Manufacturers Association\n              1300 North 17th Street, Suite 1752\n              Rosslyn, VA 22209-3801\n              USA\"\n  DESCRIPTION \n    \"NEMA delegated its sub-identifier 4 to the Joint Committee on the NTCIP \n     with its previously assigned descriptor of 'transportation'. This MIB \n     defines the overall structure of NTCIP-defined management information \n     and textual conventions that are believed to be useful for a broad range \n     of applications.\"\n  REVISION     \"202212120500Z\"\n  DESCRIPTION  \n    \"Updated to SMIv2. Divided module into a separate NEMA managed parent \n     module and an NTCIP managed module. Commented out most sub-identifiers, \n     so that they can be assigned by the MODULE-IDENTITY macro within other \n     NTCIP standards. Formalized textual conventions.\"\n  REVISION     \"200711290000Z\"\n  DESCRIPTION  \"Added tmdd and ntcipTraps nodes.\"\n  REVISION     \"200507190500Z\"\n  DESCRIPTION  \"MIB moved into NTCIP 8004 with updated module name and added\n                nodes for chap, modem, and tmdd.\"\n  REVISION     \"200112010500Z\"\n  DESCRIPTION  \"NEMA TS 3.2 republished as NTCIP 1101 v01.\"\n  REVISION     \"199610010500Z\"\n  DESCRIPTION  \"NEMA TS 3.2 approved.\"\n  ::= { nema 4 }\n\n-- A.2.1    Nodal Structure\nprotocols         OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node is the root of a subtree for protocol-related \n    management information, such as information related to 1) various layers \n    of the protocol stack, 2) profiles that cover several layers, 3) dynamic \n    object management, and NTCIP traps.\"\n  ::=  { transportation 1 }\n\ndevices           OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \n    \"&lt;Definition&gt; This node is the root of a subtree for management \n     information for various transportation devices. Management of this node \n     is delegated to the NTCIP Base Standards, Protocols, and Profiles (BSP2) \n     WG.\n     &lt;Informative&gt; The following assignments have been made under this node \n     as formally declared (or to be declared upon upgrade to SMIv2) in the \n     indicated standard:\n     Node   descriptor    Defined in\n      1     asc           NTCIP 1202 \n      2     ramp          NTCIP 1207\n      3     dms           NTCIP 1203\n      4     tss           NTCIP 1209\n      5     ess           NTCIP 1204\n      6     global        NTCIP 1201\n      7     cctv          NTCIP 1205\n      8     cctvSwitch    NTCIP 1208\n      9     dcm           NTCIP 1206\n     10     ssm           NTCIP 1210\n     11     scp           NTCIP 1211\n     12     networkCamera &lt;reserved&gt;\n     13     elms          NTCIP 1213\n     17     saeNtcip      NTCIP 1202\n     18     rsu           NTCIP 1218\n     19     globalV2      NTCIP 1201\"\n  ::=  { transportation 2 }\n\n\ntcip              OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node has been assigned to the Transit Communications \n    Interface Profiles Technical Working Group. Assignment of any nodes under \n    this subtree is delegated to that group.\"\n  ::=  { transportation 3 }\n\ntmdd              OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node has been assigned to the ITE Traffic Management Data \n    Dictionary Steering Committee. Assignment of any nodes under this subtree \n    is delegated to that group.\"\n  ::=  { transportation 4 }\n\ndeviceAdmin    OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node has been assigned for the definition of \n    administrative data that is related to the other other nodes under the \n    transportation node. Its sub-node structure is intended to parallel that \n    of the transporation node.\"\n  ::=  { devices 126 }\n\n-- **************************************************************************\n-- Protocols branch of tree\n-- **************************************************************************\nlayers            OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \n    \"&lt;Definition&gt; This node contains management information related to \n     various layers of the OSI protocol stack. \n     &lt;Informative&gt; The following subnodes have \n     been defined:\n     Node  Descriptor\n1     chap\n2     modem \n7     application\"\n  ::=  { protocols 1 }\n\napplication       OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node contains management information related to \n    protocols assigned to the application layer of the OSI stack.\"\n  ::=  { layers 7 }\n\nprofiles          OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"This node contains management information related to profiles \n    that cover several layers of the OSI stack.\"\n  ::=  { protocols 2 }\n\nntcipSmi          OBJECT-IDENTITY\n  STATUS      current\n  DESCRIPTION \"A node used to manage information related to the NTCIP SMI.\"\n  ::= { protocols 5 }\n\n-- A.2.2    Common Textual Conventions\n-- MIB developers should use textual conventions to the extent possible so \n-- that 1) associated semantics can be automated and code easily reused, and \n-- 2) generic SNMP implementations are guided on how to present values to \n-- users. The following lists/defines several textual conventions that are \n-- most widely used. The list also includes some of the APPLICATION types \n-- defined in RFC 2578 for a more complete reference set.\n-- MIB developers are also encouraged to consider the textual conventions \n-- listed at https://trac.ietf.org/trac/ops/wiki/mib-common-tcs, which is \n-- maintained with all IETF defined conventions. \n-- **************************************************************************\n-- Integers\n-- **************************************************************************\n-- \"Byte\", \"Ubyte\", \"Short\", \"Ushort\", and \"Long\" were defined in \n-- NTCIP8004v02, but have identical ranges to the following defined textual\n-- conventions defined in ISO 20684-1, which should be used instead\n-- From FIELD-DEVICE-TC-MIB\n-- @ https://standards.iso.org/iso/20684/-1/ed-2/en/iso20684-1-tc.mib\n--      ITSInteger8:      Replaces NTCIP8004v02 \"Byte\"\n--      ITSInteger16:     Replaces NTCIP8004v02 \"Short\"  \n--      ITSPositive8  \n--      ITSPositive16 \n--      ITSPositive32\n--      ITSUnsigned8:     Replaces NTCIP8004v02 \"Ubyte\"  \n--      ITSUnsigned16:    Replaces NTCIP8004v02 \"Ushort\"\n-- From SNMPv2-SMI\n-- @ RFC 2578\n--      Integer32:        Replaces NTCIP8004v02 \"Long\" and \"INTEGER\", both\n--                        of which have identical ranges\n--      Unsigned32\nNtcipPercent   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"d\"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt; An expression of a percentage from 0 to 100 contained in \n    an Integer32 type. \n   &lt;Informative&gt; This textual convention is defined to support values \n    converted from the SNMPv1 INTEGER type; new objects should use \n    ITSPercent as defined in ISO 20684-1, which is based on Unsigned32.\"\n  SYNTAX       Integer32 (0..100)\n\n\n-- **************************************************************************\n-- Counters and Gauges\n-- **************************************************************************\n-- From FIELD-DEVICE-TC-MIB\n-- @ https://standards.iso.org/iso/20684/-1/ed-2/en/iso20684-1-tc.mib\n--      ITSCounter8:       8-bit, zero-based, resetable\n--      ITSCounter16:     16-bit, zero-based, resetable  \n--      ITSCounter32:     32-bit, zero-based, resetable  \n--      ITSCounter64:     64-bit, zero-based, resetable  \n--      ITSGauge8:         8-bit gauge\n--      ITSGauge16:       16-bit gauge\n-- From SNMPv2-SMI\n-- @ RFC 2578\n--      Counter32         32-bit, random base, non-resetable\n--      Counter64         64-bit, random base, non-resetable\n--      Gauge32           32-bit gauge\n-- From RMON2-MIB\n-- @ RFC 2021\n--      ZeroBasedCounter32   32-bit, zero-based, non-resetable\n-- From HCNUM-TC\n-- @ RFC 2856\n--      ZeroBasedCounter64   64-bit, zero-based, non-resetable\n--      CounterBasedGauge64  64-bit gauge\n-- **************************************************************************\n-- Date/Time\n-- **************************************************************************\n-- From FIELD-DEVICE-TC-MIB \n-- @ https://standards.iso.org/iso/20684/-1/ed-2/en/iso20684-1-tc.mib \n--      ITSDailyTimeStamp\n--      ITSDateStamp\n--      ITSDayOfMonth\n--      ITSDayOfWeek\n--      ITSMonth\n-- **************************************************************************\n-- Other Enumerations\n-- **************************************************************************\n-- From SNMPv2-TC\n-- @ RFC 2579\n--      TruthValue\n--      TestAndIncr\n--      RowStatus\n--      StorageType\n-- From FIELD-DEVICE-TC-MIB \n-- @ https://standards.iso.org/iso/20684/-1/ed-2/en/iso20684-1-tc.mib \n--      ITSPduErrorStatus\n--      ITSUnits\n\nNtcipRowStatusStatic   ::= TEXTUAL-CONVENTION\n  STATUS       deprecated\n  DESCRIPTION  \n    \"&lt;Definition&gt;RowStatusStatic has four states and two commands associated \n     with it. \n     &lt;Format&gt; The four possible states are defined as:\n     1) other: The status is controlled or defined by a user- or \n          manufacturer-specific object.\n     2) standby: All columnar data in the row have passed (any) defined \n          consistency checks but are not to be used by the end application.\n     3) available: All columnar data in the row have passed (any) defined\n          consistency checks and are available to be used by the end \n          application.\n     4) invalid: One or more columnar objects has a value that caused the \n          row to fail at least one defined consistency check. \n\n     Setting RowStatusStatic equal to one of the above values shall return \n     an error (e.g., 'wrongValue' in SNMPv3).\n\n     The only two possible command values that may be set by a management \n     application are: \n     5) activate: Makes the columnar data in the row available for use by \n          the end application.\n     6) deactivate: Makes the columnar data in the row unavailable for use \n          by the end application.\n\n     &lt;Informative&gt; In a static table, all rows exist irrespective of whether \n     the columnar objects contain appropriate values. The value of a \n     columnar object within a row may be inappropriate when the values of \n     other columnar objects in the row are considered. An entire row itself \n     may also be considered inappropriate under some circumstances. If this \n     is the case, a static table shall include an additional columnar object \n     that defines row status and has the SYNTAX of RowStatusStatic. \n\n     UML state transition diagrams for RowStatusStatic are defined in NTCIP \n     8004.\n\n     RowStatusStatic was deprecated in NTCIP8004v03.01 in favor of RowStatus, \n     which allows implementations to create rows when needed and to destroy \n     them when not needed. This allows the potential for better memory \n     management in implementations that wish to provide this capability.\"\n  SYNTAX       INTEGER                    { other (1),                      standby (2),                      available (3),\n                     invalid (4), \n                     activate (5),\n                     deactivate (6)}\n\n\n-- **************************************************************************\n-- Bitmaps \n-- **************************************************************************\n-- New objects should use \"BITS\", unless 1) there is a need to conserve the\n-- extra bits and 2) there is confidence that the object will never need to \n-- expand to a larger value. \nNtcipOctetBitmap8   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x\"\n  STATUS       current\n  DESCRIPTION  \n   \"&lt;Definition&gt; A bitmap of up to 8 bits with Bit 0 in the low-order bit. \n      When a bit is on (1), the indicated feature is on or supported; when a \n      bit is off (0), the indicated feature is off or not supported.\n    &lt;Informative&gt; This object orders the bits in the reverse order of the \n    BITS construct but in the same order as used by INTEGERs.\"\n  SYNTAX       OCTET STRING (SIZE (1))\n\nNtcipOctetBitmap16   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x \"\n  STATUS       current\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 16 bits with Bit 0 in the low-order bit of \n      the trailing octet and Bit 15 in the high-order bit of the first octet. \n      When a bit is on (1), the indicated feature is on or supported; when a \n      bit is off (0), the indicated feature is off or not supported.\n    &lt;Informative&gt; This object orders the bits in the reverse order of the \n    BITS construct but in the same order as used by INTEGERs.\"\n  SYNTAX       OCTET STRING (SIZE (2))\n\nNtcipOctetBitmap32   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x \"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 32 bits with Bit 0 in the low-order bit of \n      the trailing octet and Bit 31 in the high-order bit of the first octet. \n      When a bit is on (1), the indicated feature is on or supported; when a \n      bit is off (0), the indicated feature is off or not supported.\n\n    &lt;Informative&gt;This has been deprecated in favor of the SNMP-standard BITS \n      construct, which orders the bits in the reverse order and allows for \n      growth in a bit field.\"\n  SYNTAX       OCTET STRING (SIZE (4))\n\nNtcipOctetBitmap512   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x \"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 512 bits (64 octets) with the meaning of \n      bits defined by the object type but in no case shall there be more than\n      seven pad bits (i.e., the length of the octet string may be less than \n      64 octets). \n\n      When a bit is set (1), the indicated feature/error is on, active,\n      supported (as defined by the object using this textual convention);\n      when a bit is not set (0), the indicated feature/error is off, not \n      active, or not supported.\n\n    &lt;Informative&gt;This has been deprecated in favor of the SNMP-standard BITS \n      construct, which orders the bits in the reverse order and allows for \n      growth in a bit field.\"\n  SYNTAX       OCTET STRING (SIZE (0..64))\n\nNtcipOctetBitmap2040   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x \"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 2040 bits (255 octets) with the meaning of\n      bits defined by the object type but in no case shall there be more than\n      seven pad bits (i.e., the length of the octet string may be less than \n      255 octets). \n\n      When a bit is set (1), the indicated feature/error is on, active,\n      supported (as defined by the object using this textual convention);\n      when a bit is not set (0), the indicated feature/error is off, not \n      active, or not supported.\n\n    &lt;Informative&gt;This has been deprecated in favor of the SNMP-standard BITS \n      construct, which orders the bits in the reverse order and allows for \n      growth in a bit field.\"\n  SYNTAX       OCTET STRING (SIZE (0..255))\n\nNtcipOctetBitmap3200   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"1x \"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 3200 bits (400 octets) with the meaning of\n      bits defined by the object type but in no case shall there be more than\n      seven pad bits (i.e., the length of the octet string may be less than \n      400 octets). \n\n      When a bit is set (1), the indicated feature/error is on, active,\n      supported (as defined by the object using this textual convention);\n      when a bit is not set (0), the indicated feature/error is off, not \n      active, or not supported.\n\n    &lt;Informative&gt;This has been deprecated in favor of the SNMP-standard BITS \n      construct, which orders the bits in the reverse order and allows for \n      growth in a bit field.\"\n  SYNTAX       OCTET STRING (SIZE (1..400))\n\nNtcipIntegerBitmap8   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"x\"\n  STATUS       current\n  DESCRIPTION  \n   \"&lt;Definition&gt; A bitmap of up to 8 bits with Bit 0 in the low-order bit. \n    &lt;Informative&gt; This object orders the bits in the reverse order of the \n    BITS construct but in the same order as used by INTEGERs.\"\n  SYNTAX       Integer32 (0..255)\n\nNtcipIntegerBitmap16   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"x\"\n  STATUS       current\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 16 bits with Bit 0 in the low-order bit of \n      the trailing octet. \n    &lt;Informative&gt; This object orders the bits in the reverse order of the \n    BITS construct but in the same order as used by INTEGERs.\"\n  SYNTAX       Integer32 (0..65535)\n\nNtcipIntegerBitmap31   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"x\"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;A bitmap of up to 31 bits with Bit 0 in the low-order bit of \n      the trailing octet. \n    &lt;Informative&gt;This has been deprecated in favor of the SNMP-standard BITS \n      construct, which orders the bits in the reverse order and allows for \n      growth in a bit field. Prior versions of NTCIP sometimes indicated a \n      value for Bit 31 (i.e., the high-order bit) with an unsigned range on \n      INTEGER; this was a technically invalid definition and resulted in \n      ambiguities as to whether it should be encoded in 4 octets (which is \n      technically a signed value, or 5 octets, which many off-the-shelf SNMP \n      engines do not support. As a result, implementation response to a value \n      that uses Bit 31 is undefined and should be avoided.\"\n  SYNTAX       Integer32 \n\n-- **************************************************************************\n-- Text \n-- **************************************************************************\n-- From SNMP-FRAMEWORK-MIB\n-- @ RFC 3411\n--      SnmpAdminString: UTF8 String 0..255 octets \n\nNtcipOwnerString   ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT \"127t\"\n  STATUS       deprecated\n  DESCRIPTION  \n   \"&lt;Definition&gt;This data type is used to model an administratively assigned \n      name of the owner of a resource, preferably in human-readable form.\n      The string is encoded in UTF-8. It is suggested that this name contain\n      one or more of the following: management station name, manager\u2019s name,\n      location or phone number.\n    &lt;Informative&gt; Versions prior to 2023 limited this textual convention to \n      the NVT ASCII character set; however, the range was expanded to allow \n      for more language support and UTF-8 is fully compatible with NVT\n      ASCII. This textual convention has been deprecated as there is seldom a\n      need to force a limit of 127 characters (as this convention does)\n      rather than 255 characters (as SnmpAdminString does). \"\n  SYNTAX       OCTET STRING (SIZE (0..127)) \n\n-- **************************************************************************\n-- Other OCTET STRING conventions\n-- **************************************************************************\n-- From FIELD-DEVICE-TC-MIB \n-- @ https://standards.iso.org/iso/20684/-1/ed-1/en/iso20684-1-1-a.mib\n--      ITSOerString\nNtcipTwoColors  ::= TEXTUAL-CONVENTION\n  DISPLAY-HINT  \"1dR1dG1dB1dR1dG1dB\"\n  STATUS  current\n  DESCRIPTION\n  \"A 6-octet value representing two colors, each encoded as a 3-octet RGB\n    value.\"\n  SYNTAX  OCTET STRING (SIZE(6))\n\n-- **************************************************************************\n-- OBJECT IDENTIFIER conventions\n-- **************************************************************************\n-- From SNMPv2-TC\n-- @ RFC 2579\n--      AutonomousType\n--      VariablePointer\n--      RowPointer\n\nEND -- NTCIP8004-Transportation \n</code></pre>"}]}